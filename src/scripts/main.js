$(document).ready(function () {
	// $("#dec").hide();
	// $("#specs").hide();
	$("#menuEnc").click(function () {
		$("body").children().not(".menu, .footer").hide();
		$(".menu button").removeClass("selected");
		$("#menuEnc").addClass("selected");
	});
	$("#menuDec").click(function () {
		$("body").children().not(".menu, .footer").hide();
		$(".menu button").removeClass("selected");
		$("#menuDec").addClass("selected");
	});
	$("#menuSpecs").click(function () {
		$("body").children().not(".menu, .footer").hide();
		$(".menu button").removeClass("selected");
		$("#menuSpecs").addClass("selected");
	});
	$('#encrypt').click(function () {
		var clearTextText = removeVietnam($("#clearTextInput").val());
		var keyText = $("#key").val();
		if (clearTextText.length === 0 || keyText.length === 0) {
			return;
		}
		var clearText = ASCII.decode(clearTextText);
		var key = ASCII.decode(keyText);
		$("#cipherTextOutput").val(Base64.encode(AES.encrypt(clearText, key)));
	});
	$('#decrypt').click(function () {
		var cipherTextText = $("#cipherTextInput").val();
		var keyText = $("#key2").val();
		if (cipherTextText.length === 0 || keyText.length === 0) {
			return;
		}
		var cipherText = Base64.decode(cipherTextText);
		if (cipherText === false) {
			return;
		} else {
			var key = ASCII.decode(keyText);
			$("#clearTextOutput").val(ASCII.encode(AES.decrypt(cipherText, key)));
		}
	});
	$('#loimat').click(function () {
		$('#key').attr('type') === 'password' ? $('#key').attr('type', 'text') : $('#key').attr('type', 'password')
	});
	$('#mumat').click(function () {
		$('#key2').attr('type') === 'password' ? $('#key2').attr('type', 'text') : $('#key2').attr('type', 'password')
	});
	$('#genkey').click(function () {
		let m = makeid(10)
		$('#key').val(m)
		$('#key').attr('type', 'text')
	});
});

function removeVietnam(str) {
	var defaultDiacriticsRemovalMap = [
		{'base':'A', 'letters':/[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g},
		{'base':'AA','letters':/[\uA732]/g},
		{'base':'AE','letters':/[\u00C6\u01FC\u01E2]/g},
		{'base':'AO','letters':/[\uA734]/g},
		{'base':'AU','letters':/[\uA736]/g},
		{'base':'AV','letters':/[\uA738\uA73A]/g},
		{'base':'AY','letters':/[\uA73C]/g},
		{'base':'B', 'letters':/[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g},
		{'base':'C', 'letters':/[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g},
		{'base':'D', 'letters':/[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g},
		{'base':'DZ','letters':/[\u01F1\u01C4]/g},
		{'base':'Dz','letters':/[\u01F2\u01C5]/g},
		{'base':'E', 'letters':/[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g},
		{'base':'F', 'letters':/[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g},
		{'base':'G', 'letters':/[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g},
		{'base':'H', 'letters':/[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g},
		{'base':'I', 'letters':/[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g},
		{'base':'J', 'letters':/[\u004A\u24BF\uFF2A\u0134\u0248]/g},
		{'base':'K', 'letters':/[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g},
		{'base':'L', 'letters':/[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g},
		{'base':'LJ','letters':/[\u01C7]/g},
		{'base':'Lj','letters':/[\u01C8]/g},
		{'base':'M', 'letters':/[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g},
		{'base':'N', 'letters':/[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g},
		{'base':'NJ','letters':/[\u01CA]/g},
		{'base':'Nj','letters':/[\u01CB]/g},
		{'base':'O', 'letters':/[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g},
		{'base':'OI','letters':/[\u01A2]/g},
		{'base':'OO','letters':/[\uA74E]/g},
		{'base':'OU','letters':/[\u0222]/g},
		{'base':'P', 'letters':/[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g},
		{'base':'Q', 'letters':/[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g},
		{'base':'R', 'letters':/[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g},
		{'base':'S', 'letters':/[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g},
		{'base':'T', 'letters':/[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g},
		{'base':'TZ','letters':/[\uA728]/g},
		{'base':'U', 'letters':/[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g},
		{'base':'V', 'letters':/[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g},
		{'base':'VY','letters':/[\uA760]/g},
		{'base':'W', 'letters':/[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g},
		{'base':'X', 'letters':/[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g},
		{'base':'Y', 'letters':/[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g},
		{'base':'Z', 'letters':/[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g},
		{'base':'a', 'letters':/[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g},
		{'base':'aa','letters':/[\uA733]/g},
		{'base':'ae','letters':/[\u00E6\u01FD\u01E3]/g},
		{'base':'ao','letters':/[\uA735]/g},
		{'base':'au','letters':/[\uA737]/g},
		{'base':'av','letters':/[\uA739\uA73B]/g},
		{'base':'ay','letters':/[\uA73D]/g},
		{'base':'b', 'letters':/[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g},
		{'base':'c', 'letters':/[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g},
		{'base':'d', 'letters':/[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g},
		{'base':'dz','letters':/[\u01F3\u01C6]/g},
		{'base':'e', 'letters':/[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g},
		{'base':'f', 'letters':/[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g},
		{'base':'g', 'letters':/[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g},
		{'base':'h', 'letters':/[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g},
		{'base':'hv','letters':/[\u0195]/g},
		{'base':'i', 'letters':/[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g},
		{'base':'j', 'letters':/[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g},
		{'base':'k', 'letters':/[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g},
		{'base':'l', 'letters':/[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g},
		{'base':'lj','letters':/[\u01C9]/g},
		{'base':'m', 'letters':/[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g},
		{'base':'n', 'letters':/[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g},
		{'base':'nj','letters':/[\u01CC]/g},
		{'base':'o', 'letters':/[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g},
		{'base':'oi','letters':/[\u01A3]/g},
		{'base':'ou','letters':/[\u0223]/g},
		{'base':'oo','letters':/[\uA74F]/g},
		{'base':'p','letters':/[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g},
		{'base':'q','letters':/[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g},
		{'base':'r','letters':/[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g},
		{'base':'s','letters':/[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g},
		{'base':'t','letters':/[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g},
		{'base':'tz','letters':/[\uA729]/g},
		{'base':'u','letters':/[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g},
		{'base':'v','letters':/[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g},
		{'base':'vy','letters':/[\uA761]/g},
		{'base':'w','letters':/[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g},
		{'base':'x','letters':/[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g},
		{'base':'y','letters':/[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g},
		{'base':'z','letters':/[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g}
	  ];
	
	  for(var i=0; i<defaultDiacriticsRemovalMap.length; i++) {
		str = str.replace(defaultDiacriticsRemovalMap[i].letters, defaultDiacriticsRemovalMap[i].base);
	  }
	
	  return str;
};

function makeid(e) {
	var text = "";
	var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

	for (var i = 0; i < e; i++)
		text += possible.charAt(Math.floor(Math.random() * possible.length));

	return text;
}

//AES
var AES = {};
AES.encrypt = function (clearText, password) {
	//Derive the key
	//Generate a random salt for the key derivation
	Status.set("Tạo muối...");
	var PBKDF2Salt = SecureRNG.generate(32);
	//Derive the key
	Status.set("Đang lấy khóa...");
	var key = PBKDF2.derive(Hmac_Sha256.hash, 32, password, PBKDF2Salt, 8192, 32);
	var hmacKey = key.splice(16, 16);
	Status.set("Đang mã hóa...");
	//Generate a random salt for encryption
	var AESSalt = SecureRNG.generate(8);
	//Split the key in 4 bytes long words and expand it
	var keys = AES.expandKey(Utilities.split(key, 4));
	//Split the clearText in 16 bytes long blocks
	var clearTextSplitted = Utilities.split(clearText, 16);
	var cipherTextSplitted = [];
	//Encrypt each block
	for (var i = 0; i < clearTextSplitted.length; i++) {
		cipherTextSplitted[i] = Utilities.xorBytes(clearTextSplitted[i], Utilities.join(AES.encryptBlock(Utilities.split(AESSalt.concat(Utilities.intToBytes(i, 8)), 4), keys)));
	}
	//Join all the blocks and preappend the salt and the hmac
	var cipherText = Utilities.join(cipherTextSplitted);
	Status.set("Đang suy nghĩ...");
	var hmac = Hmac_Sha256.hash(hmacKey, cipherText);
	Status.set("Mã hóa thàng công");
	return PBKDF2Salt.concat(AESSalt).concat(hmac).concat(cipherText);
}
AES.decrypt = function (cipherText, password) {
	var clearTextSplitted = [];
	//Derive the key
	//Get the random salt for the key derivation
	var PBKDF2Salt = cipherText.splice(0, 32);
	//Derive the key
	Status.set("Đang tìm khóa...");
	var key = PBKDF2.derive(Hmac_Sha256.hash, 32, password, PBKDF2Salt, 8192, 32);
	var hmacKey = key.splice(16, 16);
	//Get the random salt for decryption
	var AESSalt = cipherText.splice(0, 8);
	//Get the hmac
	var hmac = cipherText.splice(0, 32);
	//Test the hmac
	Status.set("Suy nghĩ tiếp...");
	var hmac2 = Hmac_Sha256.hash(hmacKey, cipherText);
	for (var i = 0; i < 32; i++) {
		if (hmac[i] != hmac2[i]) {
			Status.set("Khóa sai hoặc tin nhắn bị lỗi.");
			return [];
		}
	}
	Status.set("Đang suy nghĩ...");
	//Split the key in 4 bytes long words and expand it
	var keys = AES.expandKey(Utilities.split(key, 4));
	//Split the cipherText in 16 bytes long blocks
	var cipherTextSplitted = Utilities.split(cipherText, 16);
	//Decrypt each block
	for (var i = 0; i < cipherTextSplitted.length; i++) {
		clearTextSplitted[i] = Utilities.xorBytes(cipherTextSplitted[i], Utilities.join(AES.encryptBlock(Utilities.split(AESSalt.concat(Utilities.intToBytes(i, 8)), 4), keys)));
	}
	//Join all the blocks
	var clearText = Utilities.join(clearTextSplitted);
	Status.set("Giải mã thành công.");
	return clearText;
}
AES.padding = function (input) {
	var paddingLength = 16 - (input.length % 16);
	for (var i = 0; i < paddingLength; i++) {
		input.push(paddingLength);
	}
	return input;
}
AES.removePadding = function (input) {
	//Get the length of the padding
	var paddingLength = input[input.length - 1];
	//Check for padding
	if (paddingLength > 16) {
		return input;
	}
	for (var i = input.length - 1; i >= input.length - paddingLength; i--) {
		if (input[i] != paddingLength) {
			return input;
		}
	}
	//Remove padding
	input.splice(input.length - paddingLength, paddingLength);
	return input;
}
AES.encryptBlock = function (clearText, key) {
	var state = AES.addRoundKey(clearText, key[0]);
	for (var i = 1; i < 10; i++) {
		state = AES.subBytes(state);
		state = AES.shiftRows(state);
		state = AES.mixColumns(state);
		state = AES.addRoundKey(state, key[i]);
	}
	state = AES.subBytes(state);
	state = AES.shiftRows(state);
	state = AES.addRoundKey(state, key[10]);
	return state;
}
AES.decryptBlock = function (cipherText, key) {
	cipherText = AES.addRoundKey(cipherText, key[10]);
	cipherText = AES.shiftRowsInv(cipherText);
	cipherText = AES.subBytesInv(cipherText);
	for (var i = 9; i > 0; i--) {
		cipherText = AES.addRoundKey(cipherText, key[i]);
		cipherText = AES.mixColumnsInv(cipherText);
		cipherText = AES.shiftRowsInv(cipherText);
		cipherText = AES.subBytesInv(cipherText);
	}
	cipherText = AES.addRoundKey(cipherText, key[0]);
	return cipherText;
}
AES.shiftRows = function (state) {
	var tmp;
	for (var i = 1; i < 4; i++) {
		tmp = state[i].splice(0, i);
		state[i] = state[i].concat(tmp);
	}
	return state;
}
AES.shiftRowsInv = function (state) {
	var tmp;
	for (var i = 1; i < 4; i++) {
		tmp = state[i].splice(4 - i, i);
		state[i] = tmp.concat(state[i]);
	}
	return state;
}
AES.addRoundKey = function (state, key) {
	for (var i = 0; i < 4; i++) {
		for (var i2 = 0; i2 < 4; i2++) {
			state[i][i2] = state[i][i2] ^ key[i][i2];
		}
	}
	return state;
}
AES.subTables = {
	'direct': [
		0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
		0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
		0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
		0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
		0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
		0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
		0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
		0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
		0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
		0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
		0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
		0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
		0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
		0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
		0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
		0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
	],
	'inverse': [
		0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
		0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
		0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
		0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
		0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
		0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
		0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
		0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
		0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
		0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
		0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
		0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
		0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
		0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
		0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
		0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
	]
};
AES.subBytes = function (state) {
	for (var i = 0; i < 4; i++) {
		for (var i2 = 0; i2 < 4; i2++) {
			state[i][i2] = AES.subTables.direct[state[i][i2]];
		}
	}
	return state;
}
AES.subBytesInv = function (state) {
	for (var i = 0; i < 4; i++) {
		for (var i2 = 0; i2 < 4; i2++) {
			state[i][i2] = AES.subTables.inverse[state[i][i2]];
		}
	}
	return state;
}
AES.mixColumnsTables = {
	'tab2': [
		0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e,
		0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e,
		0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e,
		0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e,
		0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e,
		0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe,
		0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde,
		0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe,
		0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05,
		0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25,
		0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45,
		0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65,
		0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85,
		0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5,
		0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5,
		0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5
	],
	'tab3': [
		0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11,
		0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21,
		0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71,
		0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41,
		0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1,
		0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1,
		0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1,
		0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81,
		0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a,
		0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba,
		0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea,
		0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda,
		0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a,
		0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a,
		0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a,
		0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a
	],
	'tab9': [
		0x00, 0x09, 0x12, 0x1b, 0x24, 0x2d, 0x36, 0x3f, 0x48, 0x41, 0x5a, 0x53, 0x6c, 0x65, 0x7e, 0x77,
		0x90, 0x99, 0x82, 0x8b, 0xb4, 0xbd, 0xa6, 0xaf, 0xd8, 0xd1, 0xca, 0xc3, 0xfc, 0xf5, 0xee, 0xe7,
		0x3b, 0x32, 0x29, 0x20, 0x1f, 0x16, 0x0d, 0x04, 0x73, 0x7a, 0x61, 0x68, 0x57, 0x5e, 0x45, 0x4c,
		0xab, 0xa2, 0xb9, 0xb0, 0x8f, 0x86, 0x9d, 0x94, 0xe3, 0xea, 0xf1, 0xf8, 0xc7, 0xce, 0xd5, 0xdc,
		0x76, 0x7f, 0x64, 0x6d, 0x52, 0x5b, 0x40, 0x49, 0x3e, 0x37, 0x2c, 0x25, 0x1a, 0x13, 0x08, 0x01,
		0xe6, 0xef, 0xf4, 0xfd, 0xc2, 0xcb, 0xd0, 0xd9, 0xae, 0xa7, 0xbc, 0xb5, 0x8a, 0x83, 0x98, 0x91,
		0x4d, 0x44, 0x5f, 0x56, 0x69, 0x60, 0x7b, 0x72, 0x05, 0x0c, 0x17, 0x1e, 0x21, 0x28, 0x33, 0x3a,
		0xdd, 0xd4, 0xcf, 0xc6, 0xf9, 0xf0, 0xeb, 0xe2, 0x95, 0x9c, 0x87, 0x8e, 0xb1, 0xb8, 0xa3, 0xaa,
		0xec, 0xe5, 0xfe, 0xf7, 0xc8, 0xc1, 0xda, 0xd3, 0xa4, 0xad, 0xb6, 0xbf, 0x80, 0x89, 0x92, 0x9b,
		0x7c, 0x75, 0x6e, 0x67, 0x58, 0x51, 0x4a, 0x43, 0x34, 0x3d, 0x26, 0x2f, 0x10, 0x19, 0x02, 0x0b,
		0xd7, 0xde, 0xc5, 0xcc, 0xf3, 0xfa, 0xe1, 0xe8, 0x9f, 0x96, 0x8d, 0x84, 0xbb, 0xb2, 0xa9, 0xa0,
		0x47, 0x4e, 0x55, 0x5c, 0x63, 0x6a, 0x71, 0x78, 0x0f, 0x06, 0x1d, 0x14, 0x2b, 0x22, 0x39, 0x30,
		0x9a, 0x93, 0x88, 0x81, 0xbe, 0xb7, 0xac, 0xa5, 0xd2, 0xdb, 0xc0, 0xc9, 0xf6, 0xff, 0xe4, 0xed,
		0x0a, 0x03, 0x18, 0x11, 0x2e, 0x27, 0x3c, 0x35, 0x42, 0x4b, 0x50, 0x59, 0x66, 0x6f, 0x74, 0x7d,
		0xa1, 0xa8, 0xb3, 0xba, 0x85, 0x8c, 0x97, 0x9e, 0xe9, 0xe0, 0xfb, 0xf2, 0xcd, 0xc4, 0xdf, 0xd6,
		0x31, 0x38, 0x23, 0x2a, 0x15, 0x1c, 0x07, 0x0e, 0x79, 0x70, 0x6b, 0x62, 0x5d, 0x54, 0x4f, 0x46
	],
	'tab11': [
		0x00, 0x0b, 0x16, 0x1d, 0x2c, 0x27, 0x3a, 0x31, 0x58, 0x53, 0x4e, 0x45, 0x74, 0x7f, 0x62, 0x69,
		0xb0, 0xbb, 0xa6, 0xad, 0x9c, 0x97, 0x8a, 0x81, 0xe8, 0xe3, 0xfe, 0xf5, 0xc4, 0xcf, 0xd2, 0xd9,
		0x7b, 0x70, 0x6d, 0x66, 0x57, 0x5c, 0x41, 0x4a, 0x23, 0x28, 0x35, 0x3e, 0x0f, 0x04, 0x19, 0x12,
		0xcb, 0xc0, 0xdd, 0xd6, 0xe7, 0xec, 0xf1, 0xfa, 0x93, 0x98, 0x85, 0x8e, 0xbf, 0xb4, 0xa9, 0xa2,
		0xf6, 0xfd, 0xe0, 0xeb, 0xda, 0xd1, 0xcc, 0xc7, 0xae, 0xa5, 0xb8, 0xb3, 0x82, 0x89, 0x94, 0x9f,
		0x46, 0x4d, 0x50, 0x5b, 0x6a, 0x61, 0x7c, 0x77, 0x1e, 0x15, 0x08, 0x03, 0x32, 0x39, 0x24, 0x2f,
		0x8d, 0x86, 0x9b, 0x90, 0xa1, 0xaa, 0xb7, 0xbc, 0xd5, 0xde, 0xc3, 0xc8, 0xf9, 0xf2, 0xef, 0xe4,
		0x3d, 0x36, 0x2b, 0x20, 0x11, 0x1a, 0x07, 0x0c, 0x65, 0x6e, 0x73, 0x78, 0x49, 0x42, 0x5f, 0x54,
		0xf7, 0xfc, 0xe1, 0xea, 0xdb, 0xd0, 0xcd, 0xc6, 0xaf, 0xa4, 0xb9, 0xb2, 0x83, 0x88, 0x95, 0x9e,
		0x47, 0x4c, 0x51, 0x5a, 0x6b, 0x60, 0x7d, 0x76, 0x1f, 0x14, 0x09, 0x02, 0x33, 0x38, 0x25, 0x2e,
		0x8c, 0x87, 0x9a, 0x91, 0xa0, 0xab, 0xb6, 0xbd, 0xd4, 0xdf, 0xc2, 0xc9, 0xf8, 0xf3, 0xee, 0xe5,
		0x3c, 0x37, 0x2a, 0x21, 0x10, 0x1b, 0x06, 0x0d, 0x64, 0x6f, 0x72, 0x79, 0x48, 0x43, 0x5e, 0x55,
		0x01, 0x0a, 0x17, 0x1c, 0x2d, 0x26, 0x3b, 0x30, 0x59, 0x52, 0x4f, 0x44, 0x75, 0x7e, 0x63, 0x68,
		0xb1, 0xba, 0xa7, 0xac, 0x9d, 0x96, 0x8b, 0x80, 0xe9, 0xe2, 0xff, 0xf4, 0xc5, 0xce, 0xd3, 0xd8,
		0x7a, 0x71, 0x6c, 0x67, 0x56, 0x5d, 0x40, 0x4b, 0x22, 0x29, 0x34, 0x3f, 0x0e, 0x05, 0x18, 0x13,
		0xca, 0xc1, 0xdc, 0xd7, 0xe6, 0xed, 0xf0, 0xfb, 0x92, 0x99, 0x84, 0x8f, 0xbe, 0xb5, 0xa8, 0xa3
	],
	'tab13': [
		0x00, 0x0d, 0x1a, 0x17, 0x34, 0x39, 0x2e, 0x23, 0x68, 0x65, 0x72, 0x7f, 0x5c, 0x51, 0x46, 0x4b,
		0xd0, 0xdd, 0xca, 0xc7, 0xe4, 0xe9, 0xfe, 0xf3, 0xb8, 0xb5, 0xa2, 0xaf, 0x8c, 0x81, 0x96, 0x9b,
		0xbb, 0xb6, 0xa1, 0xac, 0x8f, 0x82, 0x95, 0x98, 0xd3, 0xde, 0xc9, 0xc4, 0xe7, 0xea, 0xfd, 0xf0,
		0x6b, 0x66, 0x71, 0x7c, 0x5f, 0x52, 0x45, 0x48, 0x03, 0x0e, 0x19, 0x14, 0x37, 0x3a, 0x2d, 0x20,
		0x6d, 0x60, 0x77, 0x7a, 0x59, 0x54, 0x43, 0x4e, 0x05, 0x08, 0x1f, 0x12, 0x31, 0x3c, 0x2b, 0x26,
		0xbd, 0xb0, 0xa7, 0xaa, 0x89, 0x84, 0x93, 0x9e, 0xd5, 0xd8, 0xcf, 0xc2, 0xe1, 0xec, 0xfb, 0xf6,
		0xd6, 0xdb, 0xcc, 0xc1, 0xe2, 0xef, 0xf8, 0xf5, 0xbe, 0xb3, 0xa4, 0xa9, 0x8a, 0x87, 0x90, 0x9d,
		0x06, 0x0b, 0x1c, 0x11, 0x32, 0x3f, 0x28, 0x25, 0x6e, 0x63, 0x74, 0x79, 0x5a, 0x57, 0x40, 0x4d,
		0xda, 0xd7, 0xc0, 0xcd, 0xee, 0xe3, 0xf4, 0xf9, 0xb2, 0xbf, 0xa8, 0xa5, 0x86, 0x8b, 0x9c, 0x91,
		0x0a, 0x07, 0x10, 0x1d, 0x3e, 0x33, 0x24, 0x29, 0x62, 0x6f, 0x78, 0x75, 0x56, 0x5b, 0x4c, 0x41,
		0x61, 0x6c, 0x7b, 0x76, 0x55, 0x58, 0x4f, 0x42, 0x09, 0x04, 0x13, 0x1e, 0x3d, 0x30, 0x27, 0x2a,
		0xb1, 0xbc, 0xab, 0xa6, 0x85, 0x88, 0x9f, 0x92, 0xd9, 0xd4, 0xc3, 0xce, 0xed, 0xe0, 0xf7, 0xfa,
		0xb7, 0xba, 0xad, 0xa0, 0x83, 0x8e, 0x99, 0x94, 0xdf, 0xd2, 0xc5, 0xc8, 0xeb, 0xe6, 0xf1, 0xfc,
		0x67, 0x6a, 0x7d, 0x70, 0x53, 0x5e, 0x49, 0x44, 0x0f, 0x02, 0x15, 0x18, 0x3b, 0x36, 0x21, 0x2c,
		0x0c, 0x01, 0x16, 0x1b, 0x38, 0x35, 0x22, 0x2f, 0x64, 0x69, 0x7e, 0x73, 0x50, 0x5d, 0x4a, 0x47,
		0xdc, 0xd1, 0xc6, 0xcb, 0xe8, 0xe5, 0xf2, 0xff, 0xb4, 0xb9, 0xae, 0xa3, 0x80, 0x8d, 0x9a, 0x97
	],
	'tab14': [
		0x00, 0x0e, 0x1c, 0x12, 0x38, 0x36, 0x24, 0x2a, 0x70, 0x7e, 0x6c, 0x62, 0x48, 0x46, 0x54, 0x5a,
		0xe0, 0xee, 0xfc, 0xf2, 0xd8, 0xd6, 0xc4, 0xca, 0x90, 0x9e, 0x8c, 0x82, 0xa8, 0xa6, 0xb4, 0xba,
		0xdb, 0xd5, 0xc7, 0xc9, 0xe3, 0xed, 0xff, 0xf1, 0xab, 0xa5, 0xb7, 0xb9, 0x93, 0x9d, 0x8f, 0x81,
		0x3b, 0x35, 0x27, 0x29, 0x03, 0x0d, 0x1f, 0x11, 0x4b, 0x45, 0x57, 0x59, 0x73, 0x7d, 0x6f, 0x61,
		0xad, 0xa3, 0xb1, 0xbf, 0x95, 0x9b, 0x89, 0x87, 0xdd, 0xd3, 0xc1, 0xcf, 0xe5, 0xeb, 0xf9, 0xf7,
		0x4d, 0x43, 0x51, 0x5f, 0x75, 0x7b, 0x69, 0x67, 0x3d, 0x33, 0x21, 0x2f, 0x05, 0x0b, 0x19, 0x17,
		0x76, 0x78, 0x6a, 0x64, 0x4e, 0x40, 0x52, 0x5c, 0x06, 0x08, 0x1a, 0x14, 0x3e, 0x30, 0x22, 0x2c,
		0x96, 0x98, 0x8a, 0x84, 0xae, 0xa0, 0xb2, 0xbc, 0xe6, 0xe8, 0xfa, 0xf4, 0xde, 0xd0, 0xc2, 0xcc,
		0x41, 0x4f, 0x5d, 0x53, 0x79, 0x77, 0x65, 0x6b, 0x31, 0x3f, 0x2d, 0x23, 0x09, 0x07, 0x15, 0x1b,
		0xa1, 0xaf, 0xbd, 0xb3, 0x99, 0x97, 0x85, 0x8b, 0xd1, 0xdf, 0xcd, 0xc3, 0xe9, 0xe7, 0xf5, 0xfb,
		0x9a, 0x94, 0x86, 0x88, 0xa2, 0xac, 0xbe, 0xb0, 0xea, 0xe4, 0xf6, 0xf8, 0xd2, 0xdc, 0xce, 0xc0,
		0x7a, 0x74, 0x66, 0x68, 0x42, 0x4c, 0x5e, 0x50, 0x0a, 0x04, 0x16, 0x18, 0x32, 0x3c, 0x2e, 0x20,
		0xec, 0xe2, 0xf0, 0xfe, 0xd4, 0xda, 0xc8, 0xc6, 0x9c, 0x92, 0x80, 0x8e, 0xa4, 0xaa, 0xb8, 0xb6,
		0x0c, 0x02, 0x10, 0x1e, 0x34, 0x3a, 0x28, 0x26, 0x7c, 0x72, 0x60, 0x6e, 0x44, 0x4a, 0x58, 0x56,
		0x37, 0x39, 0x2b, 0x25, 0x0f, 0x01, 0x13, 0x1d, 0x47, 0x49, 0x5b, 0x55, 0x7f, 0x71, 0x63, 0x6d,
		0xd7, 0xd9, 0xcb, 0xc5, 0xef, 0xe1, 0xf3, 0xfd, 0xa7, 0xa9, 0xbb, 0xb5, 0x9f, 0x91, 0x83, 0x8d
	]
};
AES.mixColumns = function (state) {
	var tmp = [];
	for (var i = 0; i < 4; i++) {
		tmp[0] = AES.mixColumnsTables.tab2[state[0][i]] ^ AES.mixColumnsTables.tab3[state[1][i]] ^ state[2][i] ^ state[3][i];
		tmp[1] = state[0][i] ^ AES.mixColumnsTables.tab2[state[1][i]] ^ AES.mixColumnsTables.tab3[state[2][i]] ^ state[3][i];
		tmp[2] = state[0][i] ^ state[1][i] ^ AES.mixColumnsTables.tab2[state[2][i]] ^ AES.mixColumnsTables.tab3[state[3][i]];
		tmp[3] = AES.mixColumnsTables.tab3[state[0][i]] ^ state[1][i] ^ state[2][i] ^ AES.mixColumnsTables.tab2[state[3][i]];
		for (var i2 = 0; i2 < 4; i2++) {
			state[i2][i] = tmp[i2];
		}
	}
	return state;
}
AES.mixColumnsInv = function (state) {
	var tmp = [];
	for (var i = 0; i < 4; i++) {
		tmp[0] = AES.mixColumnsTables.tab14[state[0][i]] ^ AES.mixColumnsTables.tab11[state[1][i]] ^ AES.mixColumnsTables.tab13[state[2][i]] ^ AES.mixColumnsTables.tab9[state[3][i]];
		tmp[1] = AES.mixColumnsTables.tab9[state[0][i]] ^ AES.mixColumnsTables.tab14[state[1][i]] ^ AES.mixColumnsTables.tab11[state[2][i]] ^ AES.mixColumnsTables.tab13[state[3][i]];
		tmp[2] = AES.mixColumnsTables.tab13[state[0][i]] ^ AES.mixColumnsTables.tab9[state[1][i]] ^ AES.mixColumnsTables.tab14[state[2][i]] ^ AES.mixColumnsTables.tab11[state[3][i]];
		tmp[3] = AES.mixColumnsTables.tab11[state[0][i]] ^ AES.mixColumnsTables.tab13[state[1][i]] ^ AES.mixColumnsTables.tab9[state[2][i]] ^ AES.mixColumnsTables.tab14[state[3][i]];
		for (var i2 = 0; i2 < 4; i2++) {
			state[i2][i] = tmp[i2];
		}
	}
	return state;
}
//Key schedule
AES.expandKey = function (key) {
	var keys = [];
	keys[0] = key;
	for (var i = 0; i < 10; i++) {
		keys[i + 1] = AES.keySchedule.nextKey(keys[i], i);
	}
	return keys;
}
AES.keySchedule = {};
AES.keySchedule.Rcon = [
	[0x01, 0x00, 0x00, 0x00],
	[0x02, 0x00, 0x00, 0x00],
	[0x04, 0x00, 0x00, 0x00],
	[0x08, 0x00, 0x00, 0x00],
	[0x10, 0x00, 0x00, 0x00],
	[0x20, 0x00, 0x00, 0x00],
	[0x40, 0x00, 0x00, 0x00],
	[0x80, 0x00, 0x00, 0x00],
	[0x1b, 0x00, 0x00, 0x00],
	[0x36, 0x00, 0x00, 0x00]
];
AES.keySchedule.nextKey = function (key, round) {
	var oldLastWord = [key[0][3], key[1][3], key[2][3], key[3][3]];
	//Rotate lastWord
	oldLastWord = AES.keySchedule.rotateWord(oldLastWord);
	//Substitute lastWord
	oldLastWord = AES.keySchedule.subWord(oldLastWord);
	var newFirstWord = [];
	//Xor lastColumn with first column and Rcon
	for (var i = 0; i < 4; i++) {
		newFirstWord[i] = oldLastWord[i] ^ key[i][0] ^ AES.keySchedule.Rcon[round][i];
	}
	var nextKey = AES.keySchedule.getKey(key, newFirstWord);
	return nextKey;
}
AES.keySchedule.rotateWord = function (word) {
	var buffer = word.splice(0, 1);
	word = word.concat(buffer);
	return word;
}
AES.keySchedule.subWord = function (word) {
	for (var i = 0; i < 4; i++) {
		word[i] = AES.subTables.direct[word[i]];
	}
	return word;
}
AES.keySchedule.getKey = function (oldKey, firstWord) {
	//Set the firstWord as the first word of the newKey
	var newKey = [
		[firstWord[0]],
		[firstWord[1]],
		[firstWord[2]],
		[firstWord[3]]
	];
	//Set all the other word of the newKey to the result of a xor operation between the previous word of the newKey and the same word in the oldKey
	for (var i = 0; i < 4; i++) {
		for (var i2 = 1; i2 < 4; i2++) {
			newKey[i][i2] = newKey[i][i2 - 1] ^ oldKey[i][i2];
		}
	}
	return newKey;
}

var PBKDF2 = {};
PBKDF2.derive = function (Hmac, HmacLength, password, salt, iterations, keyLength) {
	var key = [];
	//For each block of length HmacLength needed to complete the key of length KeyLength, generate the block and append it to the key
	for (var i = 0; i < Math.ceil(keyLength / HmacLength); i++) {
		key = key.concat(PBKDF2.iterate(Hmac, password, salt, iterations, i + 1));
	}
	//Keep only keyLength bytes of key
	return key.splice(0, keyLength);
}
PBKDF2.iterate = function (Hmac, password, salt, iterations, blockId) {
	var tmp = Hmac(password, salt.concat(Utilities.intToBytes(blockId, 4)));
	var result = tmp;
	for (var i = 1; i < iterations; i++) {
		tmp = Hmac(password, tmp);
		result = Utilities.xorBytes(result, tmp);
	}
	return result;
}

var Hmac_Sha256 = {};
Hmac_Sha256.hash = function (key, message) {
	//If the key is longer than 64 bytes, hash it
	if (key.length > 64) {
		key = Sha256.hash(key);
	}
	//If the key is shorter than 64 bytes, pad it with 0's
	if (key.length < 64) {
		while (key.length != 64) {
			key.push(0x0);
		}
	}
	//Set the pads to the value of the key, then xor each byte of the pads with 0x5c for the outer pad, 0x36 for the inner one
	var o_key_pad = key;
	var i_key_pad = key;
	for (var i = 0; i < 64; i++) {
		o_key_pad[i] ^= 0x5c;
		i_key_pad[i] ^= 0x36;
	}
	//Return the hash of the outer pad concatenated with the hash of the inner pad concatenated with the given message.
	return Sha256.hash(o_key_pad.concat(Sha256.hash(i_key_pad.concat(message))));
}

var Sha256 = {};
Sha256.K = [
	0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];
Sha256.hash = function (message) {
	//Reset the hash values
	Sha256.H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];
	//Preprocessing
	message = Sha256.preProcessing(message);
	//Split the message in 64 bytes long blocks
	message = Utilities.split(message, 64);
	//Process each block
	for (var i = 0; i < message.length; i++) {
		//Split the block in 4 bytes long words
		message[i] = Utilities.split(message[i], 4);
		//Convert the words from byte arrays to intagers
		for (var i2 = 0; i2 < message[i].length; i2++) {
			message[i][i2] = Utilities.bytesToInt(message[i][i2]);
		}
		//Extend the block's words
		message[i] = Sha256.extendBlock(message[i]);
		//Main loop
		Sha256.mainLoop(message[i]);
	}
	//Convert the words from intagers to 4 byte long byte arrays
	for (var i = 0; i < Sha256.H.length; i++) {
		Sha256.H[i] = Utilities.intToBytes(Sha256.H[i], 4);
	}
	//Join the hash values
	var hash = Utilities.join(Sha256.H);
	//empty the hash values
	Sha256.H = null;
	return hash;
}
Sha256.preProcessing = function (message) {
	//Get the original length of the message
	var messageLength = message.length;
	//Append one bit and seven 0s (byte 80 in base 16)
	message.push(0x80);
	//Append the minimum number of bytes 0 until the length of the message modulo 64 is equal 56
	while (message.length % 64 != 56) {
		message.push(0x0);
	}
	//Append the length in bits of the original message as a 8 byte long intager
	message = message.concat(Utilities.intToBytes(messageLength * 8, 8));
	return message;
}
Sha256.extendBlock = function (words) {
	for (var i = 16; i < 64; i++) {
		words[i] = (words[i - 16] + Sha256.σ0(words[i - 15]) + words[i - 7] + Sha256.σ1(words[i - 2])) & 0xffffffff;
	}
	return words;
}
Sha256.mainLoop = function (words) {
	//Initialize variables
	var a = Sha256.H[0],
		b = Sha256.H[1],
		c = Sha256.H[2],
		d = Sha256.H[3],
		e = Sha256.H[4],
		f = Sha256.H[5],
		g = Sha256.H[6],
		h = Sha256.H[7],
		tmp0, tmp1;
	//Main loop
	for (var i = 0; i < 64; i++) {
		tmp0 = h + Sha256.Σ1(e) + Sha256.Ch(e, f, g) + Sha256.K[i] + words[i];
		tmp1 = Sha256.Σ0(a) + Sha256.Maj(a, b, c);
		h = g;
		g = f;
		f = e;
		e = d + tmp0 & 0xffffffff;
		d = c;
		c = b;
		b = a;
		a = tmp0 + tmp1 & 0xffffffff;
	}
	//Add the result of the loop to the hash's value's array
	Sha256.H[0] = (Sha256.H[0] + a) & 0xffffffff;
	Sha256.H[1] = (Sha256.H[1] + b) & 0xffffffff;
	Sha256.H[2] = (Sha256.H[2] + c) & 0xffffffff;
	Sha256.H[3] = (Sha256.H[3] + d) & 0xffffffff;
	Sha256.H[4] = (Sha256.H[4] + e) & 0xffffffff;
	Sha256.H[5] = (Sha256.H[5] + f) & 0xffffffff;
	Sha256.H[6] = (Sha256.H[6] + g) & 0xffffffff;
	Sha256.H[7] = (Sha256.H[7] + h) & 0xffffffff;
}
Sha256.RotR = function (input, places) {
	return (input >>> places) | (input << (32 - places));
}
Sha256.Σ0 = function (x) {
	return Sha256.RotR(x, 2) ^ Sha256.RotR(x, 13) ^ Sha256.RotR(x, 22);
}
Sha256.Σ1 = function (x) {
	return Sha256.RotR(x, 6) ^ Sha256.RotR(x, 11) ^ Sha256.RotR(x, 25);
}
Sha256.σ0 = function (x) {
	return Sha256.RotR(x, 7) ^ Sha256.RotR(x, 18) ^ (x >>> 3);
}
Sha256.σ1 = function (x) {
	return Sha256.RotR(x, 17) ^ Sha256.RotR(x, 19) ^ (x >>> 10);
}
Sha256.Ch = function (x, y, z) {
	return (x & y) ^ (~x & z);
}
Sha256.Maj = function (x, y, z) {
	return (x & y) ^ (x & z) ^ (y & z);
}

var SecureRNG = {};
SecureRNG.generate = function (size) {
	//Test for support
	if (window.crypto.getRandomValues.toString() !== "function getRandomValues() { [native code] }") {
		Status.set("Hàm getRandomValues không được hỗ trợ!");
		return undefined;
	}
	//Get the random values
	var tmp1 = new Uint8Array(size);
	window.crypto.getRandomValues(tmp1);
	//Convert the random values from Uint8Array to array
	var tmp2 = new Array(size);
	for (var i = 0; i < size; i++) {
		tmp2[i] = tmp1[i];
	}
	return tmp2;
}

//ASCII Encoding and Decoding
var ASCII = {};
//Encodes byte array to ASCII string
ASCII.encode = function (bytes) {
	var str = "";
	for (var i = 0; i < bytes.length; i++) {
		str += String.fromCharCode(bytes[i]);
	}
	return str;
}
//Decodes ASCII string to byte array
ASCII.decode = function (str) {
	var bytes = [];
	for (var i = 0; i < str.length; i++) {
		bytes.push(str.charCodeAt(i));
	}
	return bytes;
}

//Hex Encoding and Decoding
var Hex = {};
//Character map
Hex.map = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];
//Encodes byte array to hex string
Hex.encode = function (bytes) {
	var str = "";
	for (var i = 0; i < bytes.length; i++) {
		str += Hex.map[bytes[i] >> 4] + Hex.map[bytes[i] % 16];
	}
	return str;
}
//Decodes hex string to byte array
Hex.decode = function (str) {
	var bytes = [],
		tmp1, tmp2;
	for (var i = 0; i < Math.floor(str.length / 2); i++) {
		tmp1 = (Hex.map.indexOf(str[i * 2]) << 4);
		tmp2 = Hex.map.indexOf(str[i * 2 + 1]);
		if (tmp1 == -1 || tmp2 == -1) {
			Status.set("Chuỗi mã hóa hex không hợp lệ.");
			return false;
		}
		bytes.push(tmp1 + tmp2);
	}
	return bytes;
}

//Base 64 Encoding and Decoding
var Base64 = {};
//Encoding
Base64.encode = function (bytes) {
	return btoa(ASCII.encode(bytes));
}
//Decoding
Base64.decode = function (str) {
	var bytes = undefined;
	try {
		bytes = ASCII.decode(atob(str));
	} catch (e) {
		Status.set("Lỗi.");
	}
	return bytes;
}

var Utilities = {};
Utilities.split = function (input, size) {
	var output = [];
	while (input.length > 0) {
		output.push(input.splice(0, size));
	}
	return output;
}
Utilities.join = function (input) {
	var output = [];
	for (var i = 0; i < input.length; i++) {
		output = output.concat(input[i]);
	}
	return output;
}
Utilities.intToBytes = function (int, size) {
	var bytes = [];
	for (var i = size - 1; i >= 0; i--) {
		bytes[i] = int & 0xFF;
		int = int >> 8;
	}
	return bytes;
}
Utilities.bytesToInt = function (bytes) {
	var int = 0;
	for (var i = 0; i < bytes.length; i++) {
		int = int << 8;
		int += bytes[i];
	}
	return int;
}
Utilities.xorBytes = function (a, b) {
	for (var i = 0; i < a.length; i++) {
		a[i] ^= b[i];
	}
	return a;
}

//Status
var Status = {};
Status.set = function (Status) {
	$('#status').text(Status);
}
Status.clear = function () {
	$('#status').text('');
}
