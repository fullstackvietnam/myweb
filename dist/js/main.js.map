{"version":3,"sources":["core.js","ie.js","main.js"],"names":["eval","p","a","c","k","e","r","parseInt","String","fromCharCode","toString","replace","RegExp","split","navigator","userAgent","match","msViewportStyle","document","createElement","appendChild","createTextNode","head","$","nua","isAndroid","indexOf","removeClass","css","ready","getUrlParameter","length","trigger","val","click","children","not","hide","addClass","clearTextText","removeVietnam","keyText","clearText","ASCII","decode","key","Base64","encode","AES","encrypt","cipherTextText","cipherText","decrypt","attr","m","makeid","param","dummyPath","sPageURL","window","location","search","substring","sURLVariables","res","i","paramName","sParameterName","decodeURIComponent","getElementById","addEventListener","copyToClipboard","elem","targetId","isInput","tagName","origSelectionStart","origSelectionEnd","target","selectionStart","selectionEnd","style","position","left","top","id","body","textContent","currentFocus","activeElement","focus","setSelectionRange","value","succeed","execCommand","alert","str","defaultDiacriticsRemovalMap","letters","base","text","possible","charAt","Math","floor","random","password","Status","set","PBKDF2Salt","SecureRNG","generate","PBKDF2","derive","Hmac_Sha256","hash","hmacKey","splice","AESSalt","keys","expandKey","Utilities","clearTextSplitted","cipherTextSplitted","xorBytes","join","encryptBlock","concat","intToBytes","hmac","hmac2","padding","input","paddingLength","push","removePadding","state","addRoundKey","subBytes","shiftRows","mixColumns","decryptBlock","shiftRowsInv","subBytesInv","mixColumnsInv","tmp","i2","subTables","direct","inverse","mixColumnsTables","tab2","tab3","tab14","tab11","tab13","tab9","keySchedule","nextKey","Rcon","round","oldLastWord","rotateWord","subWord","newFirstWord","getKey","word","buffer","oldKey","firstWord","newKey","Hmac","HmacLength","salt","iterations","keyLength","ceil","iterate","blockId","result","message","Sha256","o_key_pad","i_key_pad","K","H","preProcessing","bytesToInt","extendBlock","mainLoop","messageLength","words","σ0","σ1","b","d","f","g","h","tmp0","tmp1","Σ1","Ch","Σ0","Maj","RotR","places","x","y","z","size","crypto","getRandomValues","undefined","Uint8Array","tmp2","Array","bytes","charCodeAt","Hex","map","btoa","atob","output","int","html","clear"],"mappings":";;AAAAA,KAAA,UAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAC,EAAA,EAAAC,CAAA,EAAA;AAAAD,MAAA,WAAAF,CAAA,EAAA;AAAA,SAAA,CAAAA,IAAAD,CAAA,GAAA,EAAA,GAAAG,GAAAE,SAAAJ,IAAAD,CAAA,CAAA,CAAA,KAAA,CAAAC,IAAAA,IAAAD,CAAA,IAAA,EAAA,GAAAM,OAAAC,YAAA,CAAAN,IAAA,EAAA,CAAA,GAAAA,EAAAO,QAAA,CAAA,EAAA,CAAA,CAAA;AAAA,EAAA,CAAA,IAAA,CAAA,GAAAC,OAAA,CAAA,GAAA,EAAAH,MAAA,CAAA,EAAA;AAAA,SAAAL,GAAA;AAAAG,KAAAD,GAAAF,CAAA,CAAA,IAAAC,EAAAD,CAAA,KAAAE,GAAAF,CAAA,CAAA;AAAA,GAAAC,IAAA,CAAA,UAAAC,CAAA,EAAA;AAAA,UAAAC,EAAAD,CAAA,CAAA;AAAA,GAAA,CAAA,CAAAA,KAAA,cAAA;AAAA,UAAA,MAAA;AAAA,GAAA,CAAAF,IAAA,CAAA;AAAA,GAAA,OAAAA,GAAA;AAAA,MAAAC,EAAAD,CAAA,CAAA,EAAAF,IAAAA,EAAAU,OAAA,CAAA,IAAAC,MAAA,CAAA,QAAAP,GAAAF,CAAA,CAAA,GAAA,KAAA,EAAA,GAAA,CAAA,EAAAC,EAAAD,CAAA,CAAA,CAAA;AAAA,EAAA,OAAAF,CAAA;AAAA,CAAA,CAAA,4MAAA,EAAA,EAAA,EAAA,EAAA,EAAA,oYAAAY,KAAA,CAAA,GAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA;;ACAA;AACA;AACA,IAAAC,UAAAC,SAAA,CAAAC,KAAA,CAAA,iBAAA,CAAA,EAAA;AACA,KAAAC,kBAAAC,SAAAC,aAAA,CAAA,OAAA,CAAA;AACAF,iBAAAG,WAAA,CACAF,SAAAG,cAAA,CACA,qCADA,CADA;AAKAH,UAAAI,IAAA,CAAAF,WAAA,CAAAH,eAAA;AACA;;AAEAM,EAAA,YAAA;AACA,KAAAC,MAAAV,UAAAC,SAAA;AACA,KAAAU,YAAAD,IAAAE,OAAA,CAAA,aAAA,IAAA,CAAA,CAAA,IAAAF,IAAAE,OAAA,CAAA,UAAA,IAAA,CAAA,CAAA,IAAAF,IAAAE,OAAA,CAAA,aAAA,IAAA,CAAA,CAAA,IAAAF,IAAAE,OAAA,CAAA,QAAA,MAAA,CAAA,CAAA;AACA,KAAAD,SAAA,EAAA;AACAF,IAAA,qBAAA,EAAAI,WAAA,CAAA,cAAA,EAAAC,GAAA,CAAA,OAAA,EAAA,MAAA;AACA;AACA,CANA;ACZA;;AAEAL,EAAAL,QAAA,EAAAW,KAAA,CAAA,YAAA;AACA,KAAAC,gBAAA,KAAA,MAAA,WAAA,IAAAA,gBAAA,KAAA,EAAAC,MAAA,GAAA,CAAA,EAAA;AACAR,IAAA,sBAAA,EAAAS,OAAA,CAAA,OAAA;AACAT,IAAA,kBAAA,EAAAU,GAAA,CAAAH,gBAAA,KAAA,EAAAnB,OAAA,CAAA,IAAA,EAAA,GAAA,CAAA;AACA;AACA;AACA;AACAY,GAAA,UAAA,EAAAW,KAAA,CAAA,YAAA;AACAX,IAAA,MAAA,EAAAY,QAAA,GAAAC,GAAA,CAAA,gBAAA,EAAAC,IAAA;AACAd,IAAA,cAAA,EAAAI,WAAA,CAAA,UAAA;AACAJ,IAAA,UAAA,EAAAe,QAAA,CAAA,UAAA;AACA,EAJA;AAKAf,GAAA,UAAA,EAAAW,KAAA,CAAA,YAAA;AACAX,IAAA,MAAA,EAAAY,QAAA,GAAAC,GAAA,CAAA,gBAAA,EAAAC,IAAA;AACAd,IAAA,cAAA,EAAAI,WAAA,CAAA,UAAA;AACAJ,IAAA,UAAA,EAAAe,QAAA,CAAA,UAAA;AACA,EAJA;AAKAf,GAAA,YAAA,EAAAW,KAAA,CAAA,YAAA;AACAX,IAAA,MAAA,EAAAY,QAAA,GAAAC,GAAA,CAAA,gBAAA,EAAAC,IAAA;AACAd,IAAA,cAAA,EAAAI,WAAA,CAAA,UAAA;AACAJ,IAAA,YAAA,EAAAe,QAAA,CAAA,UAAA;AACA,EAJA;AAKAf,GAAA,UAAA,EAAAW,KAAA,CAAA,YAAA;AACA,MAAAK,gBAAAC,cAAAjB,EAAA,iBAAA,EAAAU,GAAA,EAAA,CAAA;AACA,MAAAQ,UAAAlB,EAAA,MAAA,EAAAU,GAAA,EAAA;AACA,MAAAM,cAAAR,MAAA,KAAA,CAAA,IAAAU,QAAAV,MAAA,KAAA,CAAA,EAAA;AACA;AACA;AACA,MAAAW,YAAAC,MAAAC,MAAA,CAAAL,aAAA,CAAA;AACA,MAAAM,MAAAF,MAAAC,MAAA,CAAAH,OAAA,CAAA;AACAlB,IAAA,mBAAA,EAAAU,GAAA,CAAAa,OAAAC,MAAA,CAAAC,IAAAC,OAAA,CAAAP,SAAA,EAAAG,GAAA,CAAA,CAAA;AACA,EATA;AAUAtB,GAAA,UAAA,EAAAW,KAAA,CAAA,YAAA;AACA,MAAAgB,iBAAA3B,EAAA,kBAAA,EAAAU,GAAA,EAAA;AACA,MAAAQ,UAAAlB,EAAA,OAAA,EAAAU,GAAA,EAAA;AACA,MAAAiB,eAAAnB,MAAA,KAAA,CAAA,IAAAU,QAAAV,MAAA,KAAA,CAAA,EAAA;AACA;AACA;AACA,MAAAoB,aAAAL,OAAAF,MAAA,CAAAM,cAAA,CAAA;AACA,MAAAC,eAAA,KAAA,EAAA;AACA;AACA,GAFA,MAEA;AACA,OAAAN,MAAAF,MAAAC,MAAA,CAAAH,OAAA,CAAA;AACAlB,KAAA,kBAAA,EAAAU,GAAA,CAAAU,MAAAI,MAAA,CAAAC,IAAAI,OAAA,CAAAD,UAAA,EAAAN,GAAA,CAAA,CAAA;AACA;AACA,EAbA;AAcAtB,GAAA,SAAA,EAAAW,KAAA,CAAA,YAAA;AACAX,IAAA,MAAA,EAAA8B,IAAA,CAAA,MAAA,MAAA,UAAA,GAAA9B,EAAA,MAAA,EAAA8B,IAAA,CAAA,MAAA,EAAA,MAAA,CAAA,GAAA9B,EAAA,MAAA,EAAA8B,IAAA,CAAA,MAAA,EAAA,UAAA,CAAA;AACA,EAFA;AAGA9B,GAAA,QAAA,EAAAW,KAAA,CAAA,YAAA;AACAX,IAAA,OAAA,EAAA8B,IAAA,CAAA,MAAA,MAAA,UAAA,GAAA9B,EAAA,OAAA,EAAA8B,IAAA,CAAA,MAAA,EAAA,MAAA,CAAA,GAAA9B,EAAA,OAAA,EAAA8B,IAAA,CAAA,MAAA,EAAA,UAAA,CAAA;AACA,EAFA;AAGA9B,GAAA,SAAA,EAAAW,KAAA,CAAA,YAAA;AACA,MAAAoB,IAAAC,OAAA,EAAA,CAAA;AACAhC,IAAA,MAAA,EAAAU,GAAA,CAAAqB,CAAA;AACA/B,IAAA,MAAA,EAAA8B,IAAA,CAAA,MAAA,EAAA,MAAA;AACA,EAJA;AAKA,CAzDA;;AA2DA,SAAAvB,eAAA,CAAA0B,KAAA,EAAAC,SAAA,EAAA;AACA,KAAAC,WAAAD,aAAAE,OAAAC,QAAA,CAAAC,MAAA,CAAAC,SAAA,CAAA,CAAA,CAAA;AAAA,KACAC,gBAAAL,SAAA/C,OAAA,CAAA,MAAA,EAAA,GAAA,EAAAA,OAAA,CAAA,MAAA,EAAA,IAAA,EAAAE,KAAA,CAAA,QAAA,CADA;AAAA,KAEAmD,GAFA;AAGA,MAAA,IAAAC,IAAA,CAAA,EAAAA,IAAAF,cAAAhC,MAAA,EAAAkC,KAAA,CAAA,EAAA;AACA,MAAAC,YAAAH,cAAAE,CAAA,CAAA;AAAA,MACAE,iBAAA,CAAAD,aAAA,EAAA,EAAArD,KAAA,CAAA,GAAA,CADA;;AAGA,MAAAsD,eAAA,CAAA,MAAAX,KAAA,EAAA;AACAQ,SAAAG,eAAA,CAAA,CAAA;AACA;AACA;;AAEA,QAAAC,mBAAAJ,GAAA,EAAArD,OAAA,CAAA,KAAA,EAAA,GAAA,CAAA;AACA;;AAEAO,SAAAmD,cAAA,CAAA,UAAA,EAAAC,gBAAA,CAAA,OAAA,EAAA,YAAA;AACAC,iBAAArD,SAAAmD,cAAA,CAAA,kBAAA,CAAA;AACA,CAFA;AAGAnD,SAAAmD,cAAA,CAAA,WAAA,EAAAC,gBAAA,CAAA,OAAA,EAAA,YAAA;AACAC,iBAAArD,SAAAmD,cAAA,CAAA,iBAAA,CAAA;AACA,CAFA;;AAIA,SAAAE,eAAA,CAAAC,IAAA,EAAA;AACA;AACA,KAAAC,WAAA,kBAAA;AACA,KAAAC,UAAAF,KAAAG,OAAA,KAAA,OAAA,IAAAH,KAAAG,OAAA,KAAA,UAAA;AACA,KAAAC,kBAAA,EAAAC,gBAAA;AACA,KAAAH,OAAA,EAAA;AACA;AACAI,WAAAN,IAAA;AACAI,uBAAAJ,KAAAO,cAAA;AACAF,qBAAAL,KAAAQ,YAAA;AACA,EALA,MAKA;AACA;AACAF,WAAA5D,SAAAmD,cAAA,CAAAI,QAAA,CAAA;AACA,MAAA,CAAAK,MAAA,EAAA;AACA,OAAAA,SAAA5D,SAAAC,aAAA,CAAA,UAAA,CAAA;AACA2D,UAAAG,KAAA,CAAAC,QAAA,GAAA,UAAA;AACAJ,UAAAG,KAAA,CAAAE,IAAA,GAAA,SAAA;AACAL,UAAAG,KAAA,CAAAG,GAAA,GAAA,GAAA;AACAN,UAAAO,EAAA,GAAAZ,QAAA;AACAvD,YAAAoE,IAAA,CAAAlE,WAAA,CAAA0D,MAAA;AACA;AACAA,SAAAS,WAAA,GAAAf,KAAAe,WAAA;AACA;AACA;AACA,KAAAC,eAAAtE,SAAAuE,aAAA;AACAX,QAAAY,KAAA;AACAZ,QAAAa,iBAAA,CAAA,CAAA,EAAAb,OAAAc,KAAA,CAAA7D,MAAA;;AAEA;AACA,KAAA8D,OAAA;AACA,KAAA;AACAA,YAAA3E,SAAA4E,WAAA,CAAA,MAAA,CAAA;AACA,EAFA,CAEA,OAAAzF,CAAA,EAAA;AACAwF,YAAA,KAAA;AACA;AACA;AACA,KAAAL,gBAAA,OAAAA,aAAAE,KAAA,KAAA,UAAA,EAAA;AACAF,eAAAE,KAAA;AACA;;AAEA,KAAAhB,OAAA,EAAA;AACA;AACAF,OAAAmB,iBAAA,CAAAf,kBAAA,EAAAC,gBAAA;AACA,EAHA,MAGA;AACA;AACAC,SAAAS,WAAA,GAAA,EAAA;AACA;AACAQ,OAAA,SAAA;AACA,QAAAF,OAAA;AACA;;AAEA,SAAArD,aAAA,CAAAwD,GAAA,EAAA;AACA,KAAAC,8BAAA,CAAA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAAA,EAGA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EAHA,EAMA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EANA,EASA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EATA,EAYA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EAZA,EAeA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EAfA,EAkBA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EAlBA,EAqBA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EArBA,EAwBA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAxBA,EA2BA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EA3BA,EA8BA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EA9BA,EAiCA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EAjCA,EAoCA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EApCA,EAuCA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAvCA,EA0CA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EA1CA,EA6CA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EA7CA,EAgDA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAhDA,EAmDA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAnDA,EAsDA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAtDA,EAyDA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAzDA,EA4DA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EA5DA,EA+DA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EA/DA,EAkEA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAlEA,EAqEA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EArEA,EAwEA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EAxEA,EA2EA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EA3EA,EA8EA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EA9EA,EAiFA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EAjFA,EAoFA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EApFA,EAuFA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EAvFA,EA0FA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EA1FA,EA6FA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EA7FA,EAgGA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAhGA,EAmGA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAnGA,EAsGA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAtGA,EAyGA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EAzGA,EA4GA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EA5GA,EA+GA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EA/GA,EAkHA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EAlHA,EAqHA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EArHA,EAwHA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAxHA,EA2HA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EA3HA,EA8HA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EA9HA,EAiIA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAjIA,EAoIA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EApIA,EAuIA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EAvIA,EA0IA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EA1IA,EA6IA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EA7IA,EAgJA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EAhJA,EAmJA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EAnJA,EAsJA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAtJA,EAyJA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAzJA,EA4JA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EA5JA,EA+JA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EA/JA,EAkKA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAlKA,EAqKA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EArKA,EAwKA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAxKA,EA2KA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EA3KA,EA8KA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EA9KA,EAiLA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAjLA,EAoLA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EApLA,EAuLA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAvLA,EA0LA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EA1LA,EA6LA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EA7LA,EAgMA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAhMA,EAmMA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAnMA,EAsMA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EAtMA,EAyMA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAzMA,EA4MA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EA5MA,EA+MA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EA/MA,EAkNA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EAlNA,EAqNA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EArNA,EAwNA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAxNA,EA2NA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EA3NA,EA8NA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EA9NA,EAiOA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAjOA,EAoOA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EApOA,EAuOA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAvOA,EA0OA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EA1OA,EA6OA;AACA,UAAA,IADA;AAEA,aAAA;AAFA,EA7OA,EAgPA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAhPA,EAmPA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAnPA,EAsPA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAtPA,EAyPA;AACA,UAAA,GADA;AAEA,aAAA;AAFA,EAzPA,CAAA;;AA8PA,MAAA,IAAAhC,IAAA,CAAA,EAAAA,IAAAgC,4BAAAlE,MAAA,EAAAkC,GAAA,EAAA;AACA+B,QAAAA,IAAArF,OAAA,CAAAsF,4BAAAhC,CAAA,EAAAiC,OAAA,EAAAD,4BAAAhC,CAAA,EAAAkC,IAAA,CAAA;AACA;;AAEA,QAAAH,GAAA;AACA;;AAEA,SAAAzC,MAAA,CAAAlD,CAAA,EAAA;AACA,KAAA+F,OAAA,EAAA;AACA,KAAAC,WAAA,iFAAA;;AAEA,MAAA,IAAApC,IAAA,CAAA,EAAAA,IAAA5D,CAAA,EAAA4D,GAAA;AAAAmC,UAAAC,SAAAC,MAAA,CAAAC,KAAAC,KAAA,CAAAD,KAAAE,MAAA,KAAAJ,SAAAtE,MAAA,CAAA,CAAA;AAAA,EAEA,OAAAqE,IAAA;AACA;;AAEA;AACA,IAAApD,MAAA,EAAA;AACAA,IAAAC,OAAA,GAAA,UAAAP,SAAA,EAAAgE,QAAA,EAAA;AACA;AACA;AACAC,QAAAC,GAAA,CAAA,aAAA;AACA,KAAAC,aAAAC,UAAAC,QAAA,CAAA,EAAA,CAAA;AACA;AACAJ,QAAAC,GAAA,CAAA,kBAAA;AACA,KAAA/D,MAAAmE,OAAAC,MAAA,CAAAC,YAAAC,IAAA,EAAA,EAAA,EAAAT,QAAA,EAAAG,UAAA,EAAA,IAAA,EAAA,EAAA,CAAA;AACA,KAAAO,UAAAvE,IAAAwE,MAAA,CAAA,EAAA,EAAA,EAAA,CAAA;AACAV,QAAAC,GAAA,CAAA,gBAAA;AACA;AACA,KAAAU,UAAAR,UAAAC,QAAA,CAAA,CAAA,CAAA;AACA;AACA,KAAAQ,OAAAvE,IAAAwE,SAAA,CAAAC,UAAA5G,KAAA,CAAAgC,GAAA,EAAA,CAAA,CAAA,CAAA;AACA;AACA,KAAA6E,oBAAAD,UAAA5G,KAAA,CAAA6B,SAAA,EAAA,EAAA,CAAA;AACA,KAAAiF,qBAAA,EAAA;AACA;AACA,MAAA,IAAA1D,IAAA,CAAA,EAAAA,IAAAyD,kBAAA3F,MAAA,EAAAkC,GAAA,EAAA;AACA0D,qBAAA1D,CAAA,IAAAwD,UAAAG,QAAA,CAAAF,kBAAAzD,CAAA,CAAA,EAAAwD,UAAAI,IAAA,CAAA7E,IAAA8E,YAAA,CAAAL,UAAA5G,KAAA,CAAAyG,QAAAS,MAAA,CAAAN,UAAAO,UAAA,CAAA/D,CAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAAsD,IAAA,CAAA,CAAA,CAAA;AACA;AACA;AACA,KAAApE,aAAAsE,UAAAI,IAAA,CAAAF,kBAAA,CAAA;AACAhB,QAAAC,GAAA,CAAA,kBAAA;AACA,KAAAqB,OAAAf,YAAAC,IAAA,CAAAC,OAAA,EAAAjE,UAAA,CAAA;AACAwD,QAAAC,GAAA,CAAA,mBAAA;AACA,QAAAC,WAAAkB,MAAA,CAAAT,OAAA,EAAAS,MAAA,CAAAE,IAAA,EAAAF,MAAA,CAAA5E,UAAA,CAAA;AACA,CA3BA;AA4BAH,IAAAI,OAAA,GAAA,UAAAD,UAAA,EAAAuD,QAAA,EAAA;AACA,KAAAgB,oBAAA,EAAA;AACA;AACA;AACA,KAAAb,aAAA1D,WAAAkE,MAAA,CAAA,CAAA,EAAA,EAAA,CAAA;AACA;AACAV,QAAAC,GAAA,CAAA,kBAAA;AACA,KAAA/D,MAAAmE,OAAAC,MAAA,CAAAC,YAAAC,IAAA,EAAA,EAAA,EAAAT,QAAA,EAAAG,UAAA,EAAA,IAAA,EAAA,EAAA,CAAA;AACA,KAAAO,UAAAvE,IAAAwE,MAAA,CAAA,EAAA,EAAA,EAAA,CAAA;AACA;AACA,KAAAC,UAAAnE,WAAAkE,MAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA;AACA,KAAAY,OAAA9E,WAAAkE,MAAA,CAAA,CAAA,EAAA,EAAA,CAAA;AACA;AACAV,QAAAC,GAAA,CAAA,kBAAA;AACA,KAAAsB,QAAAhB,YAAAC,IAAA,CAAAC,OAAA,EAAAjE,UAAA,CAAA;AACA,MAAA,IAAAc,IAAA,CAAA,EAAAA,IAAA,EAAA,EAAAA,GAAA,EAAA;AACA,MAAAgE,KAAAhE,CAAA,KAAAiE,MAAAjE,CAAA,CAAA,EAAA;AACA0C,UAAAC,GAAA,CAAA,gCAAA;AACA,UAAA,EAAA;AACA;AACA;AACAD,QAAAC,GAAA,CAAA,kBAAA;AACA;AACA,KAAAW,OAAAvE,IAAAwE,SAAA,CAAAC,UAAA5G,KAAA,CAAAgC,GAAA,EAAA,CAAA,CAAA,CAAA;AACA;AACA,KAAA8E,qBAAAF,UAAA5G,KAAA,CAAAsC,UAAA,EAAA,EAAA,CAAA;AACA;AACA,MAAA,IAAAc,IAAA,CAAA,EAAAA,IAAA0D,mBAAA5F,MAAA,EAAAkC,GAAA,EAAA;AACAyD,oBAAAzD,CAAA,IAAAwD,UAAAG,QAAA,CAAAD,mBAAA1D,CAAA,CAAA,EAAAwD,UAAAI,IAAA,CAAA7E,IAAA8E,YAAA,CAAAL,UAAA5G,KAAA,CAAAyG,QAAAS,MAAA,CAAAN,UAAAO,UAAA,CAAA/D,CAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAAsD,IAAA,CAAA,CAAA,CAAA;AACA;AACA;AACA,KAAA7E,YAAA+E,UAAAI,IAAA,CAAAH,iBAAA,CAAA;AACAf,QAAAC,GAAA,CAAA,qBAAA;AACA,QAAAlE,SAAA;AACA,CAnCA;AAoCAM,IAAAmF,OAAA,GAAA,UAAAC,KAAA,EAAA;AACA,KAAAC,gBAAA,KAAAD,MAAArG,MAAA,GAAA,EAAA;AACA,MAAA,IAAAkC,IAAA,CAAA,EAAAA,IAAAoE,aAAA,EAAApE,GAAA,EAAA;AACAmE,QAAAE,IAAA,CAAAD,aAAA;AACA;AACA,QAAAD,KAAA;AACA,CANA;AAOApF,IAAAuF,aAAA,GAAA,UAAAH,KAAA,EAAA;AACA;AACA,KAAAC,gBAAAD,MAAAA,MAAArG,MAAA,GAAA,CAAA,CAAA;AACA;AACA,KAAAsG,gBAAA,EAAA,EAAA;AACA,SAAAD,KAAA;AACA;AACA,MAAA,IAAAnE,IAAAmE,MAAArG,MAAA,GAAA,CAAA,EAAAkC,KAAAmE,MAAArG,MAAA,GAAAsG,aAAA,EAAApE,GAAA,EAAA;AACA,MAAAmE,MAAAnE,CAAA,KAAAoE,aAAA,EAAA;AACA,UAAAD,KAAA;AACA;AACA;AACA;AACAA,OAAAf,MAAA,CAAAe,MAAArG,MAAA,GAAAsG,aAAA,EAAAA,aAAA;AACA,QAAAD,KAAA;AACA,CAfA;AAgBApF,IAAA8E,YAAA,GAAA,UAAApF,SAAA,EAAAG,GAAA,EAAA;AACA,KAAA2F,QAAAxF,IAAAyF,WAAA,CAAA/F,SAAA,EAAAG,IAAA,CAAA,CAAA,CAAA;AACA,MAAA,IAAAoB,IAAA,CAAA,EAAAA,IAAA,EAAA,EAAAA,GAAA,EAAA;AACAuE,UAAAxF,IAAA0F,QAAA,CAAAF,KAAA,CAAA;AACAA,UAAAxF,IAAA2F,SAAA,CAAAH,KAAA,CAAA;AACAA,UAAAxF,IAAA4F,UAAA,CAAAJ,KAAA,CAAA;AACAA,UAAAxF,IAAAyF,WAAA,CAAAD,KAAA,EAAA3F,IAAAoB,CAAA,CAAA,CAAA;AACA;AACAuE,SAAAxF,IAAA0F,QAAA,CAAAF,KAAA,CAAA;AACAA,SAAAxF,IAAA2F,SAAA,CAAAH,KAAA,CAAA;AACAA,SAAAxF,IAAAyF,WAAA,CAAAD,KAAA,EAAA3F,IAAA,EAAA,CAAA,CAAA;AACA,QAAA2F,KAAA;AACA,CAZA;AAaAxF,IAAA6F,YAAA,GAAA,UAAA1F,UAAA,EAAAN,GAAA,EAAA;AACAM,cAAAH,IAAAyF,WAAA,CAAAtF,UAAA,EAAAN,IAAA,EAAA,CAAA,CAAA;AACAM,cAAAH,IAAA8F,YAAA,CAAA3F,UAAA,CAAA;AACAA,cAAAH,IAAA+F,WAAA,CAAA5F,UAAA,CAAA;AACA,MAAA,IAAAc,IAAA,CAAA,EAAAA,IAAA,CAAA,EAAAA,GAAA,EAAA;AACAd,eAAAH,IAAAyF,WAAA,CAAAtF,UAAA,EAAAN,IAAAoB,CAAA,CAAA,CAAA;AACAd,eAAAH,IAAAgG,aAAA,CAAA7F,UAAA,CAAA;AACAA,eAAAH,IAAA8F,YAAA,CAAA3F,UAAA,CAAA;AACAA,eAAAH,IAAA+F,WAAA,CAAA5F,UAAA,CAAA;AACA;AACAA,cAAAH,IAAAyF,WAAA,CAAAtF,UAAA,EAAAN,IAAA,CAAA,CAAA,CAAA;AACA,QAAAM,UAAA;AACA,CAZA;AAaAH,IAAA2F,SAAA,GAAA,UAAAH,KAAA,EAAA;AACA,KAAAS,GAAA;AACA,MAAA,IAAAhF,IAAA,CAAA,EAAAA,IAAA,CAAA,EAAAA,GAAA,EAAA;AACAgF,QAAAT,MAAAvE,CAAA,EAAAoD,MAAA,CAAA,CAAA,EAAApD,CAAA,CAAA;AACAuE,QAAAvE,CAAA,IAAAuE,MAAAvE,CAAA,EAAA8D,MAAA,CAAAkB,GAAA,CAAA;AACA;AACA,QAAAT,KAAA;AACA,CAPA;AAQAxF,IAAA8F,YAAA,GAAA,UAAAN,KAAA,EAAA;AACA,KAAAS,GAAA;AACA,MAAA,IAAAhF,IAAA,CAAA,EAAAA,IAAA,CAAA,EAAAA,GAAA,EAAA;AACAgF,QAAAT,MAAAvE,CAAA,EAAAoD,MAAA,CAAA,IAAApD,CAAA,EAAAA,CAAA,CAAA;AACAuE,QAAAvE,CAAA,IAAAgF,IAAAlB,MAAA,CAAAS,MAAAvE,CAAA,CAAA,CAAA;AACA;AACA,QAAAuE,KAAA;AACA,CAPA;AAQAxF,IAAAyF,WAAA,GAAA,UAAAD,KAAA,EAAA3F,GAAA,EAAA;AACA,MAAA,IAAAoB,IAAA,CAAA,EAAAA,IAAA,CAAA,EAAAA,GAAA,EAAA;AACA,OAAA,IAAAiF,KAAA,CAAA,EAAAA,KAAA,CAAA,EAAAA,IAAA,EAAA;AACAV,SAAAvE,CAAA,EAAAiF,EAAA,IAAAV,MAAAvE,CAAA,EAAAiF,EAAA,IAAArG,IAAAoB,CAAA,EAAAiF,EAAA,CAAA;AACA;AACA;AACA,QAAAV,KAAA;AACA,CAPA;AAQAxF,IAAAmnG,IAAA0F,QAAA,GAAA,UAAAF,KAAA,EAAA;AACA,MAAA,IAAAvE,IAAA,CAAA,EAAAA,IAAA,CAAA,EAAAA,GAAA,EAAA;AACA,OAAA,IAAAiF,KAAA,CAAA,EAAAA,KAAA,CAAA,EAAAA,IAAA,EAAA;AACAV,SAAAvE,CAAA,EAAAiF,EAAA,IAAAlG,IAAAmG,SAAA,CAAAC,MAAA,CAAAZ,MAAAvE,CAAA,EAAAiF,EAAA,CAAA,CAAA;AACA;AACA;AACA,QAAAV,KAAA;AACA,CAPA;AAQAxF,IAAA+F,WAAA,GAAA,UAAAP,KAAA,EAAA;AACA,MAAA,IAAAvE,IAAA,CAAA,EAAAA,IAAA,CAAA,EAAAA,GAAA,EAAA;AACA,OAAA,IAAAiF,KAAA,CAAA,EAAAA,KAAA,CAAA,EAAAA,IAAA,EAAA;AACAV,SAAAvE,CAAA,EAAAiF,EAAA,IAAAlG,IAAAmG,SAAA,CAAAE,OAAA,CAAAb,MAAAvE,CAAA,EAAAiF,EAAA,CAAA,CAAA;AACA;AACA;AACA,QAAAV,KAAA;AACA,CAPA;AAQAxF,IAAAsG,gtG,IAAA4F,UAAA,GAAA,UAAAJ,KAAA,EAAA;AACA,KAAAS,MAAA,EAAA;AACA,MAAA,IAAAhF,IAAA,CAAA,EAAAA,IAAA,CAAA,EAAAA,GAAA,EAAA;AACAgF,MAAA,CAAA,IAAAjG,IAAAsG,gBAAA,CAAAC,IAAA,CAAAf,MAAA,CAAA,EAAAvE,CAAA,CAAA,IAAAjB,IAAAsG,gBAAA,CAAAE,IAAA,CAAAhB,MAAA,CAAA,EAAAvE,CAAA,CAAA,CAAA,GAAAuE,MAAA,CAAA,EAAAvE,CAAA,CAAA,GAAAuE,MAAA,CAAA,EAAAvE,CAAA,CAAA;AACAgF,MAAA,CAAA,IAAAT,MAAA,CAAA,EAAAvE,CAAA,IAAAjB,IAAAsG,gBAAA,CAAAC,IAAA,CAAAf,MAAA,CAAA,EAAAvE,CAAA,CAAA,CAAA,GAAAjB,IAAAsG,gBAAA,CAAAE,IAAA,CAAAhB,MAAA,CAAA,EAAAvE,CAAA,CAAA,CAAA,GAAAuE,MAAA,CAAA,EAAAvE,CAAA,CAAA;AACAgF,MAAA,CAAA,IAAAT,MAAA,CAAA,EAAAvE,CAAA,IAAAuE,MAAA,CAAA,EAAAvE,CAAA,CAAA,GAAAjB,IAAAsG,gBAAA,CAAAC,IAAA,CAAAf,MAAA,CAAA,EAAAvE,CAAA,CAAA,CAAA,GAAAjB,IAAAsG,gBAAA,CAAAE,IAAA,CAAAhB,MAAA,CAAA,EAAAvE,CAAA,CAAA,CAAA;AACAgF,MAAA,CAAA,IAAAjG,IAAAsG,gBAAA,CAAAE,IAAA,CAAAhB,MAAA,CAAA,EAAAvE,CAAA,CAAA,IAAAuE,MAAA,CAAA,EAAAvE,CAAA,CAAA,GAAAuE,MAAA,CAAA,EAAAvE,CAAA,CAAA,GAAAjB,IAAAsG,gBAAA,CAAAC,IAAA,CAAAf,MAAA,CAAA,EAAAvE,CAAA,CAAA,CAAA;AACA,OAAA,IAAAiF,KAAA,CAAA,EAAAA,KAAA,CAAA,EAAAA,IAAA,EAAA;AACAV,SAAAU,EAAA,EAAAjF,CAAA,IAAAgF,IAAAC,EAAA,CAAA;AACA;AACA;AACA,QAAAV,KAAA;AACA,CAZA;AAaAxF,IAAAgG,aAAA,GAAA,UAAAR,KAAA,EAAA;AACA,KAAAS,MAAA,EAAA;AACA,MAAA,IAAAhF,IAAA,CAAA,EAAAA,IAAA,CAAA,EAAAA,GAAA,EAAA;AACAgF,MAAA,CAAA,IAAAjG,IAAAsG,gBAAA,CAAAG,KAAA,CAAAjB,MAAA,CAAA,EAAAvE,CAAA,CAAA,IAAAjB,IAAAsG,gBAAA,CAAAI,KAAA,CAAAlB,MAAA,CAAA,EAAAvE,CAAA,CAAA,CAAA,GAAAjB,IAAAsG,gBAAA,CAAAK,KAAA,CAAAnB,MAAA,CAAA,EAAAvE,CAAA,CAAA,CAAA,GAAAjB,IAAAsG,gBAAA,CAAAM,IAAA,CAAApB,MAAA,CAAA,EAAAvE,CAAA,CAAA,CAAA;AACAgF,MAAA,CAAA,IAAAjG,IAAAsG,gBAAA,CAAAM,IAAA,CAAApB,MAAA,CAAA,EAAAvE,CAAA,CAAA,IAAAjB,IAAAsG,gBAAA,CAAAG,KAAA,CAAAjB,MAAA,CAAA,EAAAvE,CAAA,CAAA,CAAA,GAAAjB,IAAAsG,gBAAA,CAAAI,KAAA,CAAAlB,MAAA,CAAA,EAAAvE,CAAA,CAAA,CAAA,GAAAjB,IAAAsG,gBAAA,CAAAK,KAAA,CAAAnB,MAAA,CAAA,EAAAvE,CAAA,CAAA,CAAA;AACAgF,MAAA,CAAA,IAAAjG,IAAAsG,gBAAA,CAAAK,KAAA,CAAAnB,MAAA,CAAA,EAAAvE,CAAA,CAAA,IAAAjB,IAAAsG,gBAAA,CAAAM,IAAA,CAAApB,MAAA,CAAA,EAAAvE,CAAA,CAAA,CAAA,GAAAjB,IAAAsG,gBAAA,CAAAG,KAAA,CAAAjB,MAAA,CAAA,EAAAvE,CAAA,CAAA,CAAA,GAAAjB,IAAAsG,gBAAA,CAAAI,KAAA,CAAAlB,MAAA,CAAA,EAAAvE,CAAA,CAAA,CAAA;AACAgF,MAAA,CAAA,IAAAjG,IAAAsG,gBAAA,CAAAI,KAAA,CAAAlB,MAAA,CAAA,EAAAvE,CAAA,CAAA,IAAAjB,IAAAsG,gBAAA,CAAAK,KAAA,CAAAnB,MAAA,CAAA,EAAAvE,CAAA,CAAA,CAAA,GAAAjB,IAAAsG,gBAAA,CAAAM,IAAA,CAAApB,MAAA,CAAA,EAAAvE,CAAA,CAAA,CAAA,GAAAjB,IAAAsG,gBAAA,CAAAG,KAAA,CAAAjB,MAAA,CAAA,EAAAvE,CAAA,CAAA,CAAA;AACA,OAAA,IAAAiF,KAAA,CAAA,EAAAA,KAAA,CAAA,EAAAA,IAAA,EAAA;AACAV,SAAAU,EAAA,EAAAjF,CAAA,IAAAgF,IAAAC,EAAA,CAAA;AACA;AACA;AACA,QAAAV,KAAA;AACA,CAZA;AAaA;AACAxF,IAAAwE,SAAA,GAAA,UAAA3E,GAAA,EAAA;AACA,KAAA0E,OAAA,EAAA;AACAA,MAAA,CAAA,IAAA1E,GAAA;AACA,MAAA,IAAAoB,IAAA,CAAA,EAAAA,IAAA,EAAA,EAAAA,GAAA,EAAA;AACAsD,OAAAtD,IAAA,CAAA,IAAAjB,IAAA6G,WAAA,CAAAC,OAAA,CAAAvC,KAAAtD,CAAA,CAAA,EAAAA,CAAA,CAAA;AACA;AACA,QAAAsD,IAAA;AACA,CAPA;AAQAvE,IAAA6G,WAAA,GAAA,EAAA;AACA7G,IAAA6G,WAAA,CAAAE,IAAA,GAAA,CACA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,CADA,EAEA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,CAFA,EAGA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,CAHA,EAIA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,CAJA,EAKA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,CALA,EAMA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,CANA,EAOA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,CAPA,EAQA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,CARA,EASA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,CATA,EAUA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,CAVA,CAAA;AAYA/G,IAAA6G,WAAA,CAAAC,OAAA,GAAA,UAAAjH,GAAA,EAAAmH,KAAA,EAAA;AACA,KAAAC,cAAA,CAAApH,IAAA,CAAA,EAAA,CAAA,CAAA,EAAAA,IAAA,CAAA,EAAA,CAAA,CAAA,EAAAA,IAAA,CAAA,EAAA,CAAA,CAAA,EAAAA,IAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AACA;AACAoH,eAAAjH,IAAA6G,WAAA,CAAAK,UAAA,CAAAD,WAAA,CAAA;AACA;AACAA,eAAAjH,IAAA6G,WAAA,CAAAM,OAAA,CAAAF,WAAA,CAAA;AACA,KAAAG,eAAA,EAAA;AACA;AACA,MAAA,IAAAnG,IAAA,CAAA,EAAAA,IAAA,CAAA,EAAAA,GAAA,EAAA;AACAmG,eAAAnG,CAAA,IAAAgG,YAAAhG,CAAA,IAAApB,IAAAoB,CAAA,EAAA,CAAA,CAAA,GAAAjB,IAAA6G,WAAA,CAAAE,IAAA,CAAAC,KAAA,EAAA/F,CAAA,CAAA;AACA;AACA,KAAA6F,UAAA9G,IAAA6G,WAAA,CAAAQ,MAAA,CAAAxH,GAAA,EAAAuH,YAAA,CAAA;AACA,QAAAN,OAAA;AACA,CAbA;AAcA9G,IAAA6G,WAAA,CAAAK,UAAA,GAAA,UAAAI,IAAA,EAAA;AACA,KAAAC,SAAAD,KAAAjD,MAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACAiD,QAAAA,KAAAvC,MAAA,CAAAwC,MAAA,CAAA;AACA,QAAAD,IAAA;AACA,CAJA;AAKAtH,IAAA6G,WAAA,CAAAM,OAAA,GAAA,UAAAG,IAAA,EAAA;AACA,MAAA,IAAArG,IAAA,CAAA,EAAAA,IAAA,CAAA,EAAAA,GAAA,EAAA;AACAqG,OAAArG,CAAA,IAAAjB,IAAAmG,SAAA,CAAAC,MAAA,CAAAkB,KAAArG,CAAA,CAAA,CAAA;AACA;AACA,QAAAqG,IAAA;AACA,CALA;AAMAtH,IAAA6G,WAAA,CAAAQ,MAAA,GAAA,UAAAG,MAAA,EAAAC,SAAA,EAAA;AACA;AACA,KAAAC,SAAA,CACA,CAAAD,UAAA,CAAA,CAAA,CADA,EAEA,CAAAA,UAAA,CAAA,CAAA,CAFA,EAGA,CAAAA,UAAA,CAAA,CAAA,CAHA,EAIA,CAAAA,UAAA,CAAA,CAAA,CAJA,CAAA;AAMA;AACA,MAAA,IAAAxG,IAAA,CAAA,EAAAA,IAAA,CAAA,EAAAA,GAAA,EAAA;AACA,OAAA,IAAAiF,KAAA,CAAA,EAAAA,KAAA,CAAA,EAAAA,IAAA,EAAA;AACAwB,UAAAzG,CAAA,EAAAiF,EAAA,IAAAwB,OAAAzG,CAAA,EAAAiF,KAAA,CAAA,IAAAsB,OAAAvG,CAAA,EAAAiF,EAAA,CAAA;AACA;AACA;AACA,QAAAwB,MAAA;AACA,CAfA;;AAiBA,IAAA1D,SAAA,EAAA;AACAA,OAAAC,MAAA,GAAA,UAAA0D,IAAA,EAAAC,UAAA,EAAAlE,QAAA,EAAAmE,IAAA,EAAAC,UAAA,EAAAC,SAAA,EAAA;AACA,KAAAlI,MAAA,EAAA;AACA;AACA,MAAA,IAAAoB,IAAA,CAAA,EAAAA,IAAAsC,KAAAyE,IAAA,CAAAD,YAAAH,UAAA,CAAA,EAAA3G,GAAA,EAAA;AACApB,QAAAA,IAAAkF,MAAA,CAAAf,OAAAiE,OAAA,CAAAN,IAAA,EAAAjE,QAAA,EAAAmE,IAAA,EAAAC,UAAA,EAAA7G,IAAA,CAAA,CAAA,CAAA;AACA;AACA;AACA,QAAApB,IAAAwE,MAAA,CAAA,CAAA,EAAA0D,SAAA,CAAA;AACA,CARA;AASA/D,OAAAiE,OAAA,GAAA,UAAAN,IAAA,EAAAjE,QAAA,EAAAmE,IAAA,EAAAC,UAAA,EAAAI,OAAA,EAAA;AACA,KAAAjC,MAAA0B,KAAAjE,QAAA,EAAAmE,KAAA9C,MAAA,CAAAN,UAAAO,UAAA,CAAAkD,OAAA,EAAA,CAAA,CAAA,CAAA,CAAA;AACA,KAAAC,SAAAlC,GAAA;AACA,MAAA,IAAAhF,IAAA,CAAA,EAAAA,IAAA6G,UAAA,EAAA7G,GAAA,EAAA;AACAgF,QAAA0B,KAAAjE,QAAA,EAAAuC,GAAA,CAAA;AACAkC,WAAA1D,UAAAG,QAAA,CAAAuD,MAAA,EAAAlC,GAAA,CAAA;AACA;AACA,QAAAkC,MAAA;AACA,CARA;;AAUA,IAAAjE,cAAA,EAAA;AACAA,YAAAC,IAAA,GAAA,UAAAtE,GAAA,EAAAuI,OAAA,EAAA;AACA;AACA,KAAAvI,IAAAd,MAAA,GAAA,EAAA,EAAA;AACAc,QAAAwI,OAAAlE,IAAA,CAAAtE,GAAA,CAAA;AACA;AACA;AACA,KAAAA,IAAAd,MAAA,GAAA,EAAA,EAAA;AACA,SAAAc,IAAAd,MAAA,IAAA,EAAA,EAAA;AACAc,OAAAyF,IAAA,CAAA,GAAA;AACA;AACA;AACA;AACA,KAAAgD,YAAAzI,GAAA;AACA,KAAA0I,YAAA1I,GAAA;AACA,MAAA,IAAAoB,IAAA,CAAA,EAAAA,IAAA,EAAA,EAAAA,GAAA,EAAA;AACAqH,YAAArH,CAAA,KAAA,IAAA;AACAsH,YAAAtH,CAAA,KAAA,IAAA;AACA;AACA;AACA,QAAAoH,OAAAlE,IAAA,CAAAmE,UAAAvD,MAAA,CAAAsD,OAAAlE,IAAA,CAAAoE,UAAAxD,MAAA,CAAAqD,OAAA,CAAA,CAAA,CAAA,CAAA;AACA,CApBA;;AAslE,IAAA,GAAA,UAAAiE,OAAA,EAAA;AACA;AACAC,QAAAI,CAAA,GAAA,CAAA,UAAA,EAAA,UAAA,EAAA,UAAA,EAAA,UAAA,EAAA,UAAA,EAAA,UAAA,EAAA,UAAA,EAAA,UAAA,CAAA;AACA;AACAL,WAAAC,OAAAK,aAAA,CAAAN,OAAA,CAAA;AACA;AACAA,WAAA3D,UAAA5G,KAAA,CAAAuK,OAAA,EAAA,EAAA,CAAA;AACA;AACA,MAAA,IAAAnH,IAAA,CAAA,EAAAA,IAAAmH,QAAArJ,MAAA,EAAAkC,GAAA,EAAA;AACA;AACAmH,UAAAnH,CAAA,IAAAwD,UAAA5G,KAAA,CAAAuK,QAAAnH,CAAA,CAAA,EAAA,CAAA,CAAA;AACA;AACA,OAAA,IAAAiF,KAAA,CAAA,EAAAA,KAAAkC,QAAAnH,CAAA,EAAAlC,MAAA,EAAAmH,IAAA,EAAA;AACAkC,WAAAnH,CAAA,EAAAiF,EAAA,IAAAzB,UAAAkE,UAAA,CAAAP,QAAAnH,CAAA,EAAAiF,EAAA,CAAA,CAAA;AACA;AACA;AACAkC,UAAAnH,CAAA,IAAAoH,OAAAO,WAAA,CAAAR,QAAAnH,CAAA,CAAA,CAAA;AACA;AACAoH,SAAAQ,QAAA,CAAAT,QAAAnH,CAAA,CAAA;AACA;AACA;AACA,MAAA,IAAAA,IAAA,CAAA,EAAAA,IAAAoH,OAAAI,CAAA,CAAA1J,MAAA,EAAAkC,GAAA,EAAA;AACAoH,SAAAI,CAAA,CAAAxH,CAAA,IAAAwD,UAAAO,UAAA,CAAAqD,OAAAI,CAAA,CAAAxH,CAAA,CAAA,EAAA,CAAA,CAAA;AACA;AACA;AACA,KAAAkD,OAAAM,UAAAI,IAAA,CAAAwD,OAAAI,CAAA,CAAA;AACA;AACAJ,QAAAI,CAAA,GAAA,IAAA;AACA,QAAAtE,IAAA;AACA,CA7BA;AA8BAkE,OAAAK,aAAA,GAAA,UAAAN,OAAA,EAAA;AACA;AACA,KAAAU,gBAAAV,QAAArJ,MAAA;AACA;AACAqJ,SAAA9C,IAAA,CAAA,IAAA;AACA;AACA,QAAA8C,QAAArJ,MAAA,GAAA,EAAA,IAAA,EAAA,EAAA;AACAqJ,UAAA9C,IAAA,CAAA,GAAA;AACA;AACA;AACA8C,WAAAA,QAAArD,MAAA,CAAAN,UAAAO,UAAA,CAAA8D,gBAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AACA,QAAAV,OAAA;AACA,CAZA;AAaAC,OAAAO,WAAA,GAAA,UAAAG,KAAA,EAAA;AACA,MAAA,IAAA9H,IAAA,EAAA,EAAAA,IAAA,EAAA,EAAAA,GAAA,EAAA;AACA8H,QAAA9H,CAAA,IAAA8H,MAAA9H,IAAA,EAAA,IAAAoH,OAAAW,EAAA,CAAAD,MAAA9H,IAAA,EAAA,CAAA,CAAA,GAAA8H,MAAA9H,IAAA,CAAA,CAAA,GAAAoH,OAAAY,EAAA,CAAAF,MAAA9H,IAAA,CAAA,CAAA,CAAA,GAAA,UAAA;AACA;AACA,QAAA8H,KAAA;AACA,CALA;AAMAV,OAAAQ,QAAA,GAAA,UAAAE,KAAA,EAAA;AACA;AACA,KAAA7L,IAAAmL,OAAAI,CAAA,CAAA,CAAA,CAAA;AAAA,KACAS,IAAAb,OAAAI,CAAA,CAAA,CAAA,CADA;AAAA,KAEAtL,IAAAkL,OAAAI,CAAA,CAAA,CAAA,CAFA;AAAA,KAGAU,IAAAd,OAAAI,CAAA,CAAA,CAAA,CAHA;AAAA,KAIApL,IAAAgL,OAAAI,CAAA,CAAA,CAAA,CAJA;AAAA,KAKAW,IAAAf,OAAAI,CAAA,CAAA,CAAA,CALA;AAAA,KAMAY,IAAAhB,OAAAI,CAAA,CAAA,CAAA,CANA;AAAA,KAOAa,IAAAjB,OAAAI,CAAA,CAAA,CAAA,CAPA;AAAA,KAQAc,IARA;AAAA,KASAC,IATA;AAUA;AACA,MAAA,IAAAvI,IAAA,CAAA,EAAAA,IAAA,EAAA,EAAAA,GAAA,EAAA;AACAsI,SAAAD,IAAAjB,OAAAoB,EAAA,CAAApM,CAAA,CAAA,GAAAgL,OAAAqB,EAAA,CAAArM,CAAA,EAAA+L,CAAA,EAAAC,CAAA,CAAA,GAAAhB,OAAAG,CAAA,CAAAvH,CAAA,CAAA,GAAA8H,MAAA9H,CAAA,CAAA;AACAuI,SAAAnB,OAAAsB,EAAA,CAAAzM,CAAA,IAAAmL,OAAAuB,GAAA,CAAA1M,CAAA,EAAAgM,CAAA,EAAA/L,CAAA,CAAA;AACAmM,MAAAD,CAAA;AACAA,MAAAD,CAAA;AACAA,MAAA/L,CAAA;AACAA,MAAA8L,IAAAI,IAAA,GAAA,UAAA;AACAJ,MAAAhM,CAAA;AACAA,MAAA+L,CAAA;AACAA,MAAAhM,CAAA;AACAA,MAAAqM,OAAAC,IAAA,GAAA,UAAA;AACA;AACA;AACAnB,QAAAI,CAAA,CAAA,CAAA,IAAAJ,OAAAI,CAAA,CAAA,CAAA,IAAAvL,CAAA,GAAA,UAAA;AACAmL,QAAAI,CAAA,CAAA,CAAA,IAAAJ,OAAAI,CAAA,CAAA,CAAA,IAAAS,CAAA,GAAA,UAAA;AACAb,QAAAI,CAAA,CAAA,CAAA,IAAAJ,OAAAI,CAAA,CAAA,CAAA,IAAAtL,CAAA,GAAA,UAAA;AACAkL,QAAAI,CAAA,CAAA,CAAA,IAAAJ,OAAAI,CAAA,CAAA,CAAA,IAAAU,CAAA,GAAA,UAAA;AACAd,QAAAI,CAAA,CAAA,CAAA,IAAAJ,OAAAI,CAAA,CAAA,CAAA,IAAApL,CAAA,GAAA,UAAA;AACAgL,QAAAI,CAAA,CAAA,CAAA,IAAAJ,OAAAI,CAAA,CAAA,CAAA,IAAAW,CAAA,GAAA,UAAA;AACAf,QAAAI,CAAA,CAAA,CAAA,IAAAJ,OAAAI,CAAA,CAAA,CAAA,IAAAY,CAAA,GAAA,UAAA;AACAhB,QAAAI,CAAA,CAAA,CAAA,IAAAJ,OAAAI,CAAA,CAAA,CAAA,IAAAa,CAAA,GAAA,UAAA;AACA,CAlCA;AAmCAjB,OAAAwB,IAAA,GAAA,UAAAzE,KAAA,EAAA0E,MAAA,EAAA;AACA,QAAA1E,UAAA0E,MAAA,GAAA1E,SAAA,KAAA0E,MAAA;AACA,CAFA;AAGAzB,OAAAsB,EAAA,GAAA,UAAAI,CAAA,EAAA;AACA,QAAA1B,OAAAwB,IAAA,CAAAE,CAAA,EAAA,CAAA,IAAA1B,OAAAwB,IAAA,CAAAE,CAAA,EAAA,EAAA,CAAA,GAAA1B,OAAAwB,IAAA,CAAAE,CAAA,EAAA,EAAA,CAAA;AACA,CAFA;AAGA1B,OAAAoB,EAAA,GAAA,UAAAM,CAAA,EAAA;AACA,QAAA1B,OAAAwB,IAAA,CAAAE,CAAA,EAAA,CAAA,IAAA1B,OAAAwB,IAAA,CAAAE,CAAA,EAAA,EAAA,CAAA,GAAA1B,OAAAwB,IAAA,CAAAE,CAAA,EAAA,EAAA,CAAA;AACA,CAFA;AAGA1B,OAAAW,EAAA,GAAA,UAAAe,CAAA,EAAA;AACA,QAAA1B,OAAAwB,IAAA,CAAAE,CAAA,EAAA,CAAA,IAAA1B,OAAAwB,IAAA,CAAAE,CAAA,EAAA,EAAA,CAAA,GAAAA,MAAA,CAAA;AACA,CAFA;AAGA1B,OAAAY,EAAA,GAAA,UAAAc,CAAA,EAAA;AACA,QAAA1B,OAAAwB,IAAA,CAAAE,CAAA,EAAA,EAAA,IAAA1B,OAAAwB,IAAA,CAAAE,CAAA,EAAA,EAAA,CAAA,GAAAA,MAAA,EAAA;AACA,CAFA;AAGA1B,OAAAqB,EAAA,GAAA,UAAAK,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAA;AACA,QAAAF,IAAAC,CAAA,GAAA,CAAAD,CAAA,GAAAE,CAAA;AACA,CAFA;AAGA5B,OAAAuB,GAAA,GAAA,UAAAG,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAA;AACA,QAAAF,IAAAC,CAAA,GAAAD,IAAAE,CAAA,GAAAD,IAAAC,CAAA;AACA,CAFA;;AAIA,IAAAnG,YAAA,EAAA;AACAA,UAAAC,QAAA,GAAA,UAAAmG,IAAA,EAAA;AACA;AACA,KAAAvJ,OAAAwJ,MAAA,CAAAC,eAAA,CAAA1M,QAAA,OAAA,8CAAA,EAAA;AACAiG,SAAAC,GAAA,CAAA,wCAAA;AACA,SAAAyG,SAAA;AACA;AACA;AACA,KAAAb,OAAA,IAAAc,UAAA,CAAAJ,IAAA,CAAA;AACAvJ,QAAAwJ,MAAA,CAAAC,eAAA,CAAAZ,IAAA;AACA;AACA,KAAAe,OAAA,IAAAC,KAAA,CAAAN,IAAA,CAAA;AACA,MAAA,IAAAjJ,IAAA,CAAA,EAAAA,IAAAiJ,IAAA,EAAAjJ,GAAA,EAAA;AACAsJ,OAAAtJ,CAAA,IAAAuI,KAAAvI,CAAA,CAAA;AACA;AACA,QAAAsJ,IAAA;AACA,CAfA;;AAiBA;AACA,IAAA5K,QAAA,EAAA;AACA;AACAA,MAAAI,MAAA,GAAA,UAAA0K,KAAA,EAAA;AACA,KAAAzH,MAAA,EAAA;AACA,MAAA,IAAA/B,IAAA,CAAA,EAAAA,IAAAwJ,MAAA1L,MAAA,EAAAkC,GAAA,EAAA;AACA+B,SAAAxF,OAAAC,YAAA,CAAAgN,MAAAxJ,CAAA,CAAA,CAAA;AACA;AACA,QAAA+B,GAAA;AACA,CANA;AAOA;AACArD,MAAAC,MAAA,GAAA,UAAAoD,GAAA,EAAA;AACA,KAAAyH,QAAA,EAAA;AACA,MAAA,IAAAxJ,IAAA,CAAA,EAAAA,IAAA+B,IAAAjE,MAAA,EAAAkC,GAAA,EAAA;AACAwJ,QAAAnF,IAAA,CAAAtC,IAAA0H,UAAA,CAAAzJ,CAAA,CAAA;AACA;AACA,QAAAwJ,KAAA;AACA,CANA;;AAQA;AACA,IAAAE,MAAA,EAAA;AACA;AACAA,IAAAC,GAAA,GAAA,CAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,CAAA;AACA;AACAD,IAAA5K,MAAA,GAAA,UAAA0K,KAAA,EAAA;AACA,KAAAzH,MAAA,EAAA;AACA,MAAA,IAAA/B,IAAA,CAAA,EAAAA,IAAAwJ,MAAA1L,MAAA,EAAAkC,GAAA,EAAA;AACA+B,SAAA2H,IAAAC,GAAA,CAAAH,MAAAxJ,CAAA,KAAA,CAAA,IAAA0J,IAAAC,GAAA,CAAAH,MAAAxJ,CAAA,IAAA,EAAA,CAAA;AACA;AACA,QAAA+B,GAAA;AACA,CANA;AAOA;AACA2H,IAAA/K,MAAA,GAAA,UAAAoD,GAAA,EAAA;AACA,KAAAyH,QAAA,EAAA;AAAA,KACAjB,IADA;AAAA,KAEAe,IAFA;AAGA,MAAA,IAAAtJ,IAAA,CAAA,EAAAA,IAAAsC,KAAAC,KAAA,CAAAR,IAAAjE,MAAA,GAAA,CAAA,CAAA,EAAAkC,GAAA,EAAA;AACAuI,SAAAmB,IAAAC,GAAA,CAAAlM,OAAA,CAAAsE,IAAA/B,IAAA,CAAA,CAAA,KAAA,CAAA;AACAsJ,SAAAI,IAAAC,GAAA,CAAAlM,OAAA,CAAAsE,IAAA/B,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,MAAAuI,QAAA,CAAA,CAAA,IAAAe,QAAA,CAAA,CAAA,EAAA;AACA5G,UAAAC,GAAA,CAAA,gCAAA;AACA,UAAA,KAAA;AACA;AACA6G,QAAAnF,IAAA,CAAAkE,OAAAe,IAAA;AACA;AACA,QAAAE,KAAA;AACA,CAdA;;AAgBA;AACA,IAAA3K,SAAA,EAAA;AACA;AACAA,OAAAC,MAAA,GAAA,UAAA0K,KAAA,EAAA;AACA,QAAAI,KAAAlL,MAAAI,MAAA,CAAA0K,KAAA,CAAA,CAAA;AACA,CAFA;AAGA;AACA3K,OAAAF,MAAA,GAAA,UAAAoD,GAAA,EAAA;AACA,KAAAyH,QAAAJ,SAAA;AACA,KAAA;AACAI,UAAA9K,MAAAC,MAAA,CAAAkL,KAAA9H,GAAA,CAAA,CAAA;AACA,EAFA,CAEA,OAAA3F,CAAA,EAAA;AACAsG,SAAAC,GAAA,CAAA,MAAA;AACA;AACA,QAAA6G,KAAA;AACA,CARA;;AAUA,IAAAhG,YAAA,EAAA;AACAA,UAAA5G,KAAA,GAAA,UAAAuH,KAAA,EAAA8E,IAAA,EAAA;AACA,KAAAa,SAAA,EAAA;AACA,QAAA3F,MAAArG,MAAA,GAAA,CAAA,EAAA;AACAgM,SAAAzF,IAAA,CAAAF,MAAAf,MAAA,CAAA,CAAA,EAAA6F,IAAA,CAAA;AACA;AACA,QAAAa,MAAA;AACA,CANA;AAOAtG,UAAAI,IAAA,GAAA,UAAAO,KAAA,EAAA;AACA,KAAA2F,SAAA,EAAA;AACA,MAAA,IAAA9J,IAAA,CAAA,EAAAA,IAAAmE,MAAArG,MAAA,EAAAkC,GAAA,EAAA;AACA8J,WAAAA,OAAAhG,MAAA,CAAAK,MAAAnE,CAAA,CAAA,CAAA;AACA;AACA,QAAA8J,MAAA;AACA,CANA;AAOAtG,UAAAO,UAAA,GAAA,UAAAgG,GAAA,EAAAd,IAAA,EAAA;AACA,KAAAO,QAAA,EAAA;AACA,MAAA,IAAAxJ,IAAAiJ,OAAA,CAAA,EAAAjJ,KAAA,CAAA,EAAAA,GAAA,EAAA;AACAwJ,QAAAxJ,CAAA,IAAA+J,MAAA,IAAA;AACAA,QAAAA,OAAA,CAAA;AACA;AACA,QAAAP,KAAA;AACA,CAPA;AAQAhG,UAAAkE,UAAA,GAAA,UAAA8B,KAAA,EAAA;AACA,KAAAO,MAAA,CAAA;AACA,MAAA,IAAA/J,IAAA,CAAA,EAAAA,IAAAwJ,MAAA1L,MAAA,EAAAkC,GAAA,EAAA;AACA+J,QAAAA,OAAA,CAAA;AACAA,SAAAP,MAAAxJ,CAAA,CAAA;AACA;AACA,QAAA+J,GAAA;AACA,CAPA;AAQAvG,UAAAG,QAAA,GAAA,UAAA1H,CAAA,EAAAgM,CAAA,EAAA;AACA,MAAA,IAAAjI,IAAA,CAAA,EAAAA,IAAA/D,EAAA6B,MAAA,EAAAkC,GAAA,EAAA;AACA/D,IAAA+D,CAAA,KAAAiI,EAAAjI,CAAA,CAAA;AACA;AACA,QAAA/D,CAAA;AACA,CALA;;AAOA;AACA,IAAAyG,SAAA,EAAA;AACAA,OAAAC,GAAA,GAAA,UAAAD,MAAA,EAAA;AACApF,GAAA,SAAA,EAAA0M,IAAA,CAAA,gDAAAtH,MAAA,GAAA,QAAA;AACA,CAFA;AAGAA,OAAAuH,KAAA,GAAA,YAAA;AACA3M,GAAA,SAAA,EAAA0M,IAAA,CAAA,EAAA;AACA,CAFA","file":"main.js","sourcesContent":["eval(function(p,a,c,k,e,r){e=function(c){return(c<a?'':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\\\b'+e(c)+'\\\\b','g'),k[c]);return p}('3 k(c){4 7(9(c).d(/%([0-6-F]{2})/g,3 8(a,b){4 e.f(\\'h\\'+b)}))}3 5(a){4 i(j(a).G(\\'\\').l(3(c){4\\'%\\'+(\\'m\\'+c.n(0).o(p)).q(-2)}).r(\\'\\'))}s.t=3(a){u((a=a||v.w).x&&a.y&&a.z&&A==a.B)4 $(\"C\"),D(5(\"E\")),!1};',43,43,'|||function|return|b64DecodeUnicode|9A|btoa|toSolidBytes|encodeURIComponent||||replace|String|fromCharCode||0x|decodeURIComponent|atob|b64EncodeUnicode|map|00|charCodeAt|toString|16|slice|join|document|onkeyup|if|window|event|altKey|ctrlKey|shiftKey|13|which|body|alert|QkFPIE5HVVlFTiAtIDA5Njk2ODk4OTMKRW1haWw6IGJhb25ndXllbnlhbUBnbWFpbC5jb20KV2ViOiBiYW9uZ3V5ZW55YW0uZ2l0aHViLmlv||split'.split('|'),0,{}))\n","// Copyright 2014-2017 The Bootstrap Authors\n// Copyright 2014-2017 Twitter, Inc.\nif (navigator.userAgent.match(/IEMobile\\/10\\.0/)) {\n    var msViewportStyle = document.createElement('style')\n    msViewportStyle.appendChild(\n        document.createTextNode(\n            '@-ms-viewport{width:auto!important}'\n        )\n    )\n    document.head.appendChild(msViewportStyle)\n}\n\n$(function() {\n    var nua = navigator.userAgent\n    var isAndroid = (nua.indexOf('Mozilla/5.0') > -1 && nua.indexOf('Android ') > -1 && nua.indexOf('AppleWebKit') > -1 && nua.indexOf('Chrome') === -1)\n    if (isAndroid) {\n        $('select.form-control').removeClass('form-control').css('width', '100%')\n    }\n})","'use strict';\n\n$(document).ready(function () {\n\tif (getUrlParameter('key') !== 'undefined' && getUrlParameter('key').length > 0) {\n\t\t$('#v-pills-profile-tab').trigger('click');\n\t\t$('#cipherTextInput').val(getUrlParameter('key').replace(/ /g, \"+\"));\n\t}\n\t// $(\"#dec\").hide();\n\t// $(\"#specs\").hide();\n\t$(\"#menuEnc\").click(function () {\n\t\t$(\"body\").children().not(\".menu, .footer\").hide();\n\t\t$(\".menu button\").removeClass(\"selected\");\n\t\t$(\"#menuEnc\").addClass(\"selected\");\n\t});\n\t$(\"#menuDec\").click(function () {\n\t\t$(\"body\").children().not(\".menu, .footer\").hide();\n\t\t$(\".menu button\").removeClass(\"selected\");\n\t\t$(\"#menuDec\").addClass(\"selected\");\n\t});\n\t$(\"#menuSpecs\").click(function () {\n\t\t$(\"body\").children().not(\".menu, .footer\").hide();\n\t\t$(\".menu button\").removeClass(\"selected\");\n\t\t$(\"#menuSpecs\").addClass(\"selected\");\n\t});\n\t$('#encrypt').click(function () {\n\t\tvar clearTextText = removeVietnam($(\"#clearTextInput\").val());\n\t\tvar keyText = $(\"#key\").val();\n\t\tif (clearTextText.length === 0 || keyText.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tvar clearText = ASCII.decode(clearTextText);\n\t\tvar key = ASCII.decode(keyText);\n\t\t$(\"#cipherTextOutput\").val(Base64.encode(AES.encrypt(clearText, key)));\n\t});\n\t$('#decrypt').click(function () {\n\t\tvar cipherTextText = $(\"#cipherTextInput\").val();\n\t\tvar keyText = $(\"#key2\").val();\n\t\tif (cipherTextText.length === 0 || keyText.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tvar cipherText = Base64.decode(cipherTextText);\n\t\tif (cipherText === false) {\n\t\t\treturn;\n\t\t} else {\n\t\t\tvar key = ASCII.decode(keyText);\n\t\t\t$(\"#clearTextOutput\").val(ASCII.encode(AES.decrypt(cipherText, key)));\n\t\t}\n\t});\n\t$('#loimat').click(function () {\n\t\t$('#key').attr('type') === 'password' ? $('#key').attr('type', 'text') : $('#key').attr('type', 'password');\n\t});\n\t$('#mumat').click(function () {\n\t\t$('#key2').attr('type') === 'password' ? $('#key2').attr('type', 'text') : $('#key2').attr('type', 'password');\n\t});\n\t$('#genkey').click(function () {\n\t\tvar m = makeid(20);\n\t\t$('#key').val(m);\n\t\t$('#key').attr('type', 'text');\n\t});\n});\n\nfunction getUrlParameter(param, dummyPath) {\n\tvar sPageURL = dummyPath || window.location.search.substring(1),\n\t\tsURLVariables = sPageURL.replace(/%2C/g, \",\").replace(/%3D/g, \"@#\").split(/[&||?]/),\n\t\tres;\n\tfor (var i = 0; i < sURLVariables.length; i += 1) {\n\t\tvar paramName = sURLVariables[i],\n\t\t\tsParameterName = (paramName || \"\").split(\"=\");\n\n\t\tif (sParameterName[0] === param) {\n\t\t\tres = sParameterName[1];\n\t\t}\n\t}\n\n\treturn decodeURIComponent(res).replace(/@#/g, \"=\");\n}\n\ndocument.getElementById(\"copyClip\").addEventListener(\"click\", function () {\n\tcopyToClipboard(document.getElementById(\"cipherTextOutput\"));\n});\ndocument.getElementById(\"copyClip2\").addEventListener(\"click\", function () {\n\tcopyToClipboard(document.getElementById(\"clearTextOutput\"));\n});\n\nfunction copyToClipboard(elem) {\n\t// create hidden text element, if it doesn't already exist\n\tvar targetId = \"_hiddenCopyText_\";\n\tvar isInput = elem.tagName === \"INPUT\" || elem.tagName === \"TEXTAREA\";\n\tvar origSelectionStart, origSelectionEnd;\n\tif (isInput) {\n\t\t// can just use the original source element for the selection and copy\n\t\ttarget = elem;\n\t\torigSelectionStart = elem.selectionStart;\n\t\torigSelectionEnd = elem.selectionEnd;\n\t} else {\n\t\t// must use a temporary form element for the selection and copy\n\t\ttarget = document.getElementById(targetId);\n\t\tif (!target) {\n\t\t\tvar target = document.createElement(\"textarea\");\n\t\t\ttarget.style.position = \"absolute\";\n\t\t\ttarget.style.left = \"-9999px\";\n\t\t\ttarget.style.top = \"0\";\n\t\t\ttarget.id = targetId;\n\t\t\tdocument.body.appendChild(target);\n\t\t}\n\t\ttarget.textContent = elem.textContent;\n\t}\n\t// select the content\n\tvar currentFocus = document.activeElement;\n\ttarget.focus();\n\ttarget.setSelectionRange(0, target.value.length);\n\n\t// copy the selection\n\tvar succeed;\n\ttry {\n\t\tsucceed = document.execCommand(\"copy\");\n\t} catch (e) {\n\t\tsucceed = false;\n\t}\n\t// restore original focus\n\tif (currentFocus && typeof currentFocus.focus === \"function\") {\n\t\tcurrentFocus.focus();\n\t}\n\n\tif (isInput) {\n\t\t// restore prior selection\n\t\telem.setSelectionRange(origSelectionStart, origSelectionEnd);\n\t} else {\n\t\t// clear temporary content\n\t\ttarget.textContent = \"\";\n\t}\n\talert('Đã copy');\n\treturn succeed;\n}\n\nfunction removeVietnam(str) {\n\tvar defaultDiacriticsRemovalMap = [{\n\t\t'base': 'A',\n\t\t'letters': /[\\u0041\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F]/g\n\t}, {\n\t\t'base': 'AA',\n\t\t'letters': /[\\uA732]/g\n\t}, {\n\t\t'base': 'AE',\n\t\t'letters': /[\\u00C6\\u01FC\\u01E2]/g\n\t}, {\n\t\t'base': 'AO',\n\t\t'letters': /[\\uA734]/g\n\t}, {\n\t\t'base': 'AU',\n\t\t'letters': /[\\uA736]/g\n\t}, {\n\t\t'base': 'AV',\n\t\t'letters': /[\\uA738\\uA73A]/g\n\t}, {\n\t\t'base': 'AY',\n\t\t'letters': /[\\uA73C]/g\n\t}, {\n\t\t'base': 'B',\n\t\t'letters': /[\\u0042\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0182\\u0181]/g\n\t}, {\n\t\t'base': 'C',\n\t\t'letters': /[\\u0043\\u24B8\\uFF23\\u0106\\u0108\\u010A\\u010C\\u00C7\\u1E08\\u0187\\u023B\\uA73E]/g\n\t}, {\n\t\t'base': 'D',\n\t\t'letters': /[\\u0044\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018B\\u018A\\u0189\\uA779]/g\n\t}, {\n\t\t'base': 'DZ',\n\t\t'letters': /[\\u01F1\\u01C4]/g\n\t}, {\n\t\t'base': 'Dz',\n\t\t'letters': /[\\u01F2\\u01C5]/g\n\t}, {\n\t\t'base': 'E',\n\t\t'letters': /[\\u0045\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E]/g\n\t}, {\n\t\t'base': 'F',\n\t\t'letters': /[\\u0046\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B]/g\n\t}, {\n\t\t'base': 'G',\n\t\t'letters': /[\\u0047\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E]/g\n\t}, {\n\t\t'base': 'H',\n\t\t'letters': /[\\u0048\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D]/g\n\t}, {\n\t\t'base': 'I',\n\t\t'letters': /[\\u0049\\u24BE\\uFF29\\u00CC\\u00CD\\u00CE\\u0128\\u012A\\u012C\\u0130\\u00CF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197]/g\n\t}, {\n\t\t'base': 'J',\n\t\t'letters': /[\\u004A\\u24BF\\uFF2A\\u0134\\u0248]/g\n\t}, {\n\t\t'base': 'K',\n\t\t'letters': /[\\u004B\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2]/g\n\t}, {\n\t\t'base': 'L',\n\t\t'letters': /[\\u004C\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780]/g\n\t}, {\n\t\t'base': 'LJ',\n\t\t'letters': /[\\u01C7]/g\n\t}, {\n\t\t'base': 'Lj',\n\t\t'letters': /[\\u01C8]/g\n\t}, {\n\t\t'base': 'M',\n\t\t'letters': /[\\u004D\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C]/g\n\t}, {\n\t\t'base': 'N',\n\t\t'letters': /[\\u004E\\u24C3\\uFF2E\\u01F8\\u0143\\u00D1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u0220\\u019D\\uA790\\uA7A4]/g\n\t}, {\n\t\t'base': 'NJ',\n\t\t'letters': /[\\u01CA]/g\n\t}, {\n\t\t'base': 'Nj',\n\t\t'letters': /[\\u01CB]/g\n\t}, {\n\t\t'base': 'O',\n\t\t'letters': /[\\u004F\\u24C4\\uFF2F\\u00D2\\u00D3\\u00D4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\u00D5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\u00D6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\u00D8\\u01FE\\u0186\\u019F\\uA74A\\uA74C]/g\n\t}, {\n\t\t'base': 'OI',\n\t\t'letters': /[\\u01A2]/g\n\t}, {\n\t\t'base': 'OO',\n\t\t'letters': /[\\uA74E]/g\n\t}, {\n\t\t'base': 'OU',\n\t\t'letters': /[\\u0222]/g\n\t}, {\n\t\t'base': 'P',\n\t\t'letters': /[\\u0050\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754]/g\n\t}, {\n\t\t'base': 'Q',\n\t\t'letters': /[\\u0051\\u24C6\\uFF31\\uA756\\uA758\\u024A]/g\n\t}, {\n\t\t'base': 'R',\n\t\t'letters': /[\\u0052\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782]/g\n\t}, {\n\t\t'base': 'S',\n\t\t'letters': /[\\u0053\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784]/g\n\t}, {\n\t\t'base': 'T',\n\t\t'letters': /[\\u0054\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786]/g\n\t}, {\n\t\t'base': 'TZ',\n\t\t'letters': /[\\uA728]/g\n\t}, {\n\t\t'base': 'U',\n\t\t'letters': /[\\u0055\\u24CA\\uFF35\\u00D9\\u00DA\\u00DB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\u00DC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244]/g\n\t}, {\n\t\t'base': 'V',\n\t\t'letters': /[\\u0056\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245]/g\n\t}, {\n\t\t'base': 'VY',\n\t\t'letters': /[\\uA760]/g\n\t}, {\n\t\t'base': 'W',\n\t\t'letters': /[\\u0057\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72]/g\n\t}, {\n\t\t'base': 'X',\n\t\t'letters': /[\\u0058\\u24CD\\uFF38\\u1E8A\\u1E8C]/g\n\t}, {\n\t\t'base': 'Y',\n\t\t'letters': /[\\u0059\\u24CE\\uFF39\\u1EF2\\u00DD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE]/g\n\t}, {\n\t\t'base': 'Z',\n\t\t'letters': /[\\u005A\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762]/g\n\t}, {\n\t\t'base': 'a',\n\t\t'letters': /[\\u0061\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250]/g\n\t}, {\n\t\t'base': 'aa',\n\t\t'letters': /[\\uA733]/g\n\t}, {\n\t\t'base': 'ae',\n\t\t'letters': /[\\u00E6\\u01FD\\u01E3]/g\n\t}, {\n\t\t'base': 'ao',\n\t\t'letters': /[\\uA735]/g\n\t}, {\n\t\t'base': 'au',\n\t\t'letters': /[\\uA737]/g\n\t}, {\n\t\t'base': 'av',\n\t\t'letters': /[\\uA739\\uA73B]/g\n\t}, {\n\t\t'base': 'ay',\n\t\t'letters': /[\\uA73D]/g\n\t}, {\n\t\t'base': 'b',\n\t\t'letters': /[\\u0062\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253]/g\n\t}, {\n\t\t'base': 'c',\n\t\t'letters': /[\\u0063\\u24D2\\uFF43\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184]/g\n\t}, {\n\t\t'base': 'd',\n\t\t'letters': /[\\u0064\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\uA77A]/g\n\t}, {\n\t\t'base': 'dz',\n\t\t'letters': /[\\u01F3\\u01C6]/g\n\t}, {\n\t\t'base': 'e',\n\t\t'letters': /[\\u0065\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u025B\\u01DD]/g\n\t}, {\n\t\t'base': 'f',\n\t\t'letters': /[\\u0066\\u24D5\\uFF46\\u1E1F\\u0192\\uA77C]/g\n\t}, {\n\t\t'base': 'g',\n\t\t'letters': /[\\u0067\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\u1D79\\uA77F]/g\n\t}, {\n\t\t'base': 'h',\n\t\t'letters': /[\\u0068\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265]/g\n\t}, {\n\t\t'base': 'hv',\n\t\t'letters': /[\\u0195]/g\n\t}, {\n\t\t'base': 'i',\n\t\t'letters': /[\\u0069\\u24D8\\uFF49\\u00EC\\u00ED\\u00EE\\u0129\\u012B\\u012D\\u00EF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131]/g\n\t}, {\n\t\t'base': 'j',\n\t\t'letters': /[\\u006A\\u24D9\\uFF4A\\u0135\\u01F0\\u0249]/g\n\t}, {\n\t\t'base': 'k',\n\t\t'letters': /[\\u006B\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3]/g\n\t}, {\n\t\t'base': 'l',\n\t\t'letters': /[\\u006C\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747]/g\n\t}, {\n\t\t'base': 'lj',\n\t\t'letters': /[\\u01C9]/g\n\t}, {\n\t\t'base': 'm',\n\t\t'letters': /[\\u006D\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F]/g\n\t}, {\n\t\t'base': 'n',\n\t\t'letters': /[\\u006E\\u24DD\\uFF4E\\u01F9\\u0144\\u00F1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5]/g\n\t}, {\n\t\t'base': 'nj',\n\t\t'letters': /[\\u01CC]/g\n\t}, {\n\t\t'base': 'o',\n\t\t'letters': /[\\u006F\\u24DE\\uFF4F\\u00F2\\u00F3\\u00F4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\u00F5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\u00F6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\u00F8\\u01FF\\u0254\\uA74B\\uA74D\\u0275]/g\n\t}, {\n\t\t'base': 'oi',\n\t\t'letters': /[\\u01A3]/g\n\t}, {\n\t\t'base': 'ou',\n\t\t'letters': /[\\u0223]/g\n\t}, {\n\t\t'base': 'oo',\n\t\t'letters': /[\\uA74F]/g\n\t}, {\n\t\t'base': 'p',\n\t\t'letters': /[\\u0070\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755]/g\n\t}, {\n\t\t'base': 'q',\n\t\t'letters': /[\\u0071\\u24E0\\uFF51\\u024B\\uA757\\uA759]/g\n\t}, {\n\t\t'base': 'r',\n\t\t'letters': /[\\u0072\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783]/g\n\t}, {\n\t\t'base': 's',\n\t\t'letters': /[\\u0073\\u24E2\\uFF53\\u00DF\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B]/g\n\t}, {\n\t\t'base': 't',\n\t\t'letters': /[\\u0074\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787]/g\n\t}, {\n\t\t'base': 'tz',\n\t\t'letters': /[\\uA729]/g\n\t}, {\n\t\t'base': 'u',\n\t\t'letters': /[\\u0075\\u24E4\\uFF55\\u00F9\\u00FA\\u00FB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\u00FC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289]/g\n\t}, {\n\t\t'base': 'v',\n\t\t'letters': /[\\u0076\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C]/g\n\t}, {\n\t\t'base': 'vy',\n\t\t'letters': /[\\uA761]/g\n\t}, {\n\t\t'base': 'w',\n\t\t'letters': /[\\u0077\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73]/g\n\t}, {\n\t\t'base': 'x',\n\t\t'letters': /[\\u0078\\u24E7\\uFF58\\u1E8B\\u1E8D]/g\n\t}, {\n\t\t'base': 'y',\n\t\t'letters': /[\\u0079\\u24E8\\uFF59\\u1EF3\\u00FD\\u0177\\u1EF9\\u0233\\u1E8F\\u00FF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF]/g\n\t}, {\n\t\t'base': 'z',\n\t\t'letters': /[\\u007A\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763]/g\n\t}];\n\n\tfor (var i = 0; i < defaultDiacriticsRemovalMap.length; i++) {\n\t\tstr = str.replace(defaultDiacriticsRemovalMap[i].letters, defaultDiacriticsRemovalMap[i].base);\n\t}\n\n\treturn str;\n};\n\nfunction makeid(e) {\n\tvar text = \"\";\n\tvar possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz=/+!0123456789#@$%^&*-?\\\\.~\";\n\n\tfor (var i = 0; i < e; i++) text += possible.charAt(Math.floor(Math.random() * possible.length));\n\n\treturn text;\n}\n\n//AES\nvar AES = {};\nAES.encrypt = function (clearText, password) {\n\t//Derive the key\n\t//Generate a random salt for the key derivation\n\tStatus.set(\"Tạo muối...\");\n\tvar PBKDF2Salt = SecureRNG.generate(32);\n\t//Derive the key\n\tStatus.set(\"Đang lấy khóa...\");\n\tvar key = PBKDF2.derive(Hmac_Sha256.hash, 32, password, PBKDF2Salt, 8192, 32);\n\tvar hmacKey = key.splice(16, 16);\n\tStatus.set(\"Đang mã hóa...\");\n\t//Generate a random salt for encryption\n\tvar AESSalt = SecureRNG.generate(8);\n\t//Split the key in 4 bytes long words and expand it\n\tvar keys = AES.expandKey(Utilities.split(key, 4));\n\t//Split the clearText in 16 bytes long blocks\n\tvar clearTextSplitted = Utilities.split(clearText, 16);\n\tvar cipherTextSplitted = [];\n\t//Encrypt each block\n\tfor (var i = 0; i < clearTextSplitted.length; i++) {\n\t\tcipherTextSplitted[i] = Utilities.xorBytes(clearTextSplitted[i], Utilities.join(AES.encryptBlock(Utilities.split(AESSalt.concat(Utilities.intToBytes(i, 8)), 4), keys)));\n\t}\n\t//Join all the blocks and preappend the salt and the hmac\n\tvar cipherText = Utilities.join(cipherTextSplitted);\n\tStatus.set(\"Đang suy nghĩ...\");\n\tvar hmac = Hmac_Sha256.hash(hmacKey, cipherText);\n\tStatus.set(\"Mã hóa thàng công\");\n\treturn PBKDF2Salt.concat(AESSalt).concat(hmac).concat(cipherText);\n};\nAES.decrypt = function (cipherText, password) {\n\tvar clearTextSplitted = [];\n\t//Derive the key\n\t//Get the random salt for the key derivation\n\tvar PBKDF2Salt = cipherText.splice(0, 32);\n\t//Derive the key\n\tStatus.set(\"Đang tìm khóa...\");\n\tvar key = PBKDF2.derive(Hmac_Sha256.hash, 32, password, PBKDF2Salt, 8192, 32);\n\tvar hmacKey = key.splice(16, 16);\n\t//Get the random salt for decryption\n\tvar AESSalt = cipherText.splice(0, 8);\n\t//Get the hmac\n\tvar hmac = cipherText.splice(0, 32);\n\t//Test the hmac\n\tStatus.set(\"Suy nghĩ tiếp...\");\n\tvar hmac2 = Hmac_Sha256.hash(hmacKey, cipherText);\n\tfor (var i = 0; i < 32; i++) {\n\t\tif (hmac[i] != hmac2[i]) {\n\t\t\tStatus.set(\"Khóa sai hoặc tin nhắn bị lỗi.\");\n\t\t\treturn [];\n\t\t}\n\t}\n\tStatus.set(\"Đang suy nghĩ...\");\n\t//Split the key in 4 bytes long words and expand it\n\tvar keys = AES.expandKey(Utilities.split(key, 4));\n\t//Split the cipherText in 16 bytes long blocks\n\tvar cipherTextSplitted = Utilities.split(cipherText, 16);\n\t//Decrypt each block\n\tfor (var i = 0; i < cipherTextSplitted.length; i++) {\n\t\tclearTextSplitted[i] = Utilities.xorBytes(cipherTextSplitted[i], Utilities.join(AES.encryptBlock(Utilities.split(AESSalt.concat(Utilities.intToBytes(i, 8)), 4), keys)));\n\t}\n\t//Join all the blocks\n\tvar clearText = Utilities.join(clearTextSplitted);\n\tStatus.set(\"Giải mã thành công.\");\n\treturn clearText;\n};\nAES.padding = function (input) {\n\tvar paddingLength = 16 - input.length % 16;\n\tfor (var i = 0; i < paddingLength; i++) {\n\t\tinput.push(paddingLength);\n\t}\n\treturn input;\n};\nAES.removePadding = function (input) {\n\t//Get the length of the padding\n\tvar paddingLength = input[input.length - 1];\n\t//Check for padding\n\tif (paddingLength > 16) {\n\t\treturn input;\n\t}\n\tfor (var i = input.length - 1; i >= input.length - paddingLength; i--) {\n\t\tif (input[i] != paddingLength) {\n\t\t\treturn input;\n\t\t}\n\t}\n\t//Remove padding\n\tinput.splice(input.length - paddingLength, paddingLength);\n\treturn input;\n};\nAES.encryptBlock = function (clearText, key) {\n\tvar state = AES.addRoundKey(clearText, key[0]);\n\tfor (var i = 1; i < 10; i++) {\n\t\tstate = AES.subBytes(state);\n\t\tstate = AES.shiftRows(state);\n\t\tstate = AES.mixColumns(state);\n\t\tstate = AES.addRoundKey(state, key[i]);\n\t}\n\tstate = AES.subBytes(state);\n\tstate = AES.shiftRows(state);\n\tstate = AES.addRoundKey(state, key[10]);\n\treturn state;\n};\nAES.decryptBlock = function (cipherText, key) {\n\tcipherText = AES.addRoundKey(cipherText, key[10]);\n\tcipherText = AES.shiftRowsInv(cipherText);\n\tcipherText = AES.subBytesInv(cipherText);\n\tfor (var i = 9; i > 0; i--) {\n\t\tcipherText = AES.addRoundKey(cipherText, key[i]);\n\t\tcipherText = AES.mixColumnsInv(cipherText);\n\t\tcipherText = AES.shiftRowsInv(cipherText);\n\t\tcipherText = AES.subBytesInv(cipherText);\n\t}\n\tcipherText = AES.addRoundKey(cipherText, key[0]);\n\treturn cipherText;\n};\nAES.shiftRows = function (state) {\n\tvar tmp;\n\tfor (var i = 1; i < 4; i++) {\n\t\ttmp = state[i].splice(0, i);\n\t\tstate[i] = state[i].concat(tmp);\n\t}\n\treturn state;\n};\nAES.shiftRowsInv = function (state) {\n\tvar tmp;\n\tfor (var i = 1; i < 4; i++) {\n\t\ttmp = state[i].splice(4 - i, i);\n\t\tstate[i] = tmp.concat(state[i]);\n\t}\n\treturn state;\n};\nAES.addRoundKey = function (state, key) {\n\tfor (var i = 0; i < 4; i++) {\n\t\tfor (var i2 = 0; i2 < 4; i2++) {\n\t\t\tstate[i][i2] = state[i][i2] ^ key[i][i2];\n\t\t}\n\t}\n\treturn state;\n};\nAES.subTables = {\n\t'direct': [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16],\n\t'inverse': [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]\n};\nAES.subBytes = function (state) {\n\tfor (var i = 0; i < 4; i++) {\n\t\tfor (var i2 = 0; i2 < 4; i2++) {\n\t\t\tstate[i][i2] = AES.subTables.direct[state[i][i2]];\n\t\t}\n\t}\n\treturn state;\n};\nAES.subBytesInv = function (state) {\n\tfor (var i = 0; i < 4; i++) {\n\t\tfor (var i2 = 0; i2 < 4; i2++) {\n\t\t\tstate[i][i2] = AES.subTables.inverse[state[i][i2]];\n\t\t}\n\t}\n\treturn state;\n};\nAES.mixColumnsTables = {\n\t'tab2': [0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e, 0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e, 0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e, 0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e, 0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe, 0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05, 0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25, 0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45, 0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65, 0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85, 0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5, 0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5, 0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5],\n\t'tab3': [0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11, 0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21, 0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71, 0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41, 0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1, 0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1, 0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1, 0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81, 0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a, 0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba, 0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea, 0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda, 0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a, 0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a, 0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a, 0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a],\n\t'tab9': [0x00, 0x09, 0x12, 0x1b, 0x24, 0x2d, 0x36, 0x3f, 0x48, 0x41, 0x5a, 0x53, 0x6c, 0x65, 0x7e, 0x77, 0x90, 0x99, 0x82, 0x8b, 0xb4, 0xbd, 0xa6, 0xaf, 0xd8, 0xd1, 0xca, 0xc3, 0xfc, 0xf5, 0xee, 0xe7, 0x3b, 0x32, 0x29, 0x20, 0x1f, 0x16, 0x0d, 0x04, 0x73, 0x7a, 0x61, 0x68, 0x57, 0x5e, 0x45, 0x4c, 0xab, 0xa2, 0xb9, 0xb0, 0x8f, 0x86, 0x9d, 0x94, 0xe3, 0xea, 0xf1, 0xf8, 0xc7, 0xce, 0xd5, 0xdc, 0x76, 0x7f, 0x64, 0x6d, 0x52, 0x5b, 0x40, 0x49, 0x3e, 0x37, 0x2c, 0x25, 0x1a, 0x13, 0x08, 0x01, 0xe6, 0xef, 0xf4, 0xfd, 0xc2, 0xcb, 0xd0, 0xd9, 0xae, 0xa7, 0xbc, 0xb5, 0x8a, 0x83, 0x98, 0x91, 0x4d, 0x44, 0x5f, 0x56, 0x69, 0x60, 0x7b, 0x72, 0x05, 0x0c, 0x17, 0x1e, 0x21, 0x28, 0x33, 0x3a, 0xdd, 0xd4, 0xcf, 0xc6, 0xf9, 0xf0, 0xeb, 0xe2, 0x95, 0x9c, 0x87, 0x8e, 0xb1, 0xb8, 0xa3, 0xaa, 0xec, 0xe5, 0xfe, 0xf7, 0xc8, 0xc1, 0xda, 0xd3, 0xa4, 0xad, 0xb6, 0xbf, 0x80, 0x89, 0x92, 0x9b, 0x7c, 0x75, 0x6e, 0x67, 0x58, 0x51, 0x4a, 0x43, 0x34, 0x3d, 0x26, 0x2f, 0x10, 0x19, 0x02, 0x0b, 0xd7, 0xde, 0xc5, 0xcc, 0xf3, 0xfa, 0xe1, 0xe8, 0x9f, 0x96, 0x8d, 0x84, 0xbb, 0xb2, 0xa9, 0xa0, 0x47, 0x4e, 0x55, 0x5c, 0x63, 0x6a, 0x71, 0x78, 0x0f, 0x06, 0x1d, 0x14, 0x2b, 0x22, 0x39, 0x30, 0x9a, 0x93, 0x88, 0x81, 0xbe, 0xb7, 0xac, 0xa5, 0xd2, 0xdb, 0xc0, 0xc9, 0xf6, 0xff, 0xe4, 0xed, 0x0a, 0x03, 0x18, 0x11, 0x2e, 0x27, 0x3c, 0x35, 0x42, 0x4b, 0x50, 0x59, 0x66, 0x6f, 0x74, 0x7d, 0xa1, 0xa8, 0xb3, 0xba, 0x85, 0x8c, 0x97, 0x9e, 0xe9, 0xe0, 0xfb, 0xf2, 0xcd, 0xc4, 0xdf, 0xd6, 0x31, 0x38, 0x23, 0x2a, 0x15, 0x1c, 0x07, 0x0e, 0x79, 0x70, 0x6b, 0x62, 0x5d, 0x54, 0x4f, 0x46],\n\t'tab11': [0x00, 0x0b, 0x16, 0x1d, 0x2c, 0x27, 0x3a, 0x31, 0x58, 0x53, 0x4e, 0x45, 0x74, 0x7f, 0x62, 0x69, 0xb0, 0xbb, 0xa6, 0xad, 0x9c, 0x97, 0x8a, 0x81, 0xe8, 0xe3, 0xfe, 0xf5, 0xc4, 0xcf, 0xd2, 0xd9, 0x7b, 0x70, 0x6d, 0x66, 0x57, 0x5c, 0x41, 0x4a, 0x23, 0x28, 0x35, 0x3e, 0x0f, 0x04, 0x19, 0x12, 0xcb, 0xc0, 0xdd, 0xd6, 0xe7, 0xec, 0xf1, 0xfa, 0x93, 0x98, 0x85, 0x8e, 0xbf, 0xb4, 0xa9, 0xa2, 0xf6, 0xfd, 0xe0, 0xeb, 0xda, 0xd1, 0xcc, 0xc7, 0xae, 0xa5, 0xb8, 0xb3, 0x82, 0x89, 0x94, 0x9f, 0x46, 0x4d, 0x50, 0x5b, 0x6a, 0x61, 0x7c, 0x77, 0x1e, 0x15, 0x08, 0x03, 0x32, 0x39, 0x24, 0x2f, 0x8d, 0x86, 0x9b, 0x90, 0xa1, 0xaa, 0xb7, 0xbc, 0xd5, 0xde, 0xc3, 0xc8, 0xf9, 0xf2, 0xef, 0xe4, 0x3d, 0x36, 0x2b, 0x20, 0x11, 0x1a, 0x07, 0x0c, 0x65, 0x6e, 0x73, 0x78, 0x49, 0x42, 0x5f, 0x54, 0xf7, 0xfc, 0xe1, 0xea, 0xdb, 0xd0, 0xcd, 0xc6, 0xaf, 0xa4, 0xb9, 0xb2, 0x83, 0x88, 0x95, 0x9e, 0x47, 0x4c, 0x51, 0x5a, 0x6b, 0x60, 0x7d, 0x76, 0x1f, 0x14, 0x09, 0x02, 0x33, 0x38, 0x25, 0x2e, 0x8c, 0x87, 0x9a, 0x91, 0xa0, 0xab, 0xb6, 0xbd, 0xd4, 0xdf, 0xc2, 0xc9, 0xf8, 0xf3, 0xee, 0xe5, 0x3c, 0x37, 0x2a, 0x21, 0x10, 0x1b, 0x06, 0x0d, 0x64, 0x6f, 0x72, 0x79, 0x48, 0x43, 0x5e, 0x55, 0x01, 0x0a, 0x17, 0x1c, 0x2d, 0x26, 0x3b, 0x30, 0x59, 0x52, 0x4f, 0x44, 0x75, 0x7e, 0x63, 0x68, 0xb1, 0xba, 0xa7, 0xac, 0x9d, 0x96, 0x8b, 0x80, 0xe9, 0xe2, 0xff, 0xf4, 0xc5, 0xce, 0xd3, 0xd8, 0x7a, 0x71, 0x6c, 0x67, 0x56, 0x5d, 0x40, 0x4b, 0x22, 0x29, 0x34, 0x3f, 0x0e, 0x05, 0x18, 0x13, 0xca, 0xc1, 0xdc, 0xd7, 0xe6, 0xed, 0xf0, 0xfb, 0x92, 0x99, 0x84, 0x8f, 0xbe, 0xb5, 0xa8, 0xa3],\n\t'tab13': [0x00, 0x0d, 0x1a, 0x17, 0x34, 0x39, 0x2e, 0x23, 0x68, 0x65, 0x72, 0x7f, 0x5c, 0x51, 0x46, 0x4b, 0xd0, 0xdd, 0xca, 0xc7, 0xe4, 0xe9, 0xfe, 0xf3, 0xb8, 0xb5, 0xa2, 0xaf, 0x8c, 0x81, 0x96, 0x9b, 0xbb, 0xb6, 0xa1, 0xac, 0x8f, 0x82, 0x95, 0x98, 0xd3, 0xde, 0xc9, 0xc4, 0xe7, 0xea, 0xfd, 0xf0, 0x6b, 0x66, 0x71, 0x7c, 0x5f, 0x52, 0x45, 0x48, 0x03, 0x0e, 0x19, 0x14, 0x37, 0x3a, 0x2d, 0x20, 0x6d, 0x60, 0x77, 0x7a, 0x59, 0x54, 0x43, 0x4e, 0x05, 0x08, 0x1f, 0x12, 0x31, 0x3c, 0x2b, 0x26, 0xbd, 0xb0, 0xa7, 0xaa, 0x89, 0x84, 0x93, 0x9e, 0xd5, 0xd8, 0xcf, 0xc2, 0xe1, 0xec, 0xfb, 0xf6, 0xd6, 0xdb, 0xcc, 0xc1, 0xe2, 0xef, 0xf8, 0xf5, 0xbe, 0xb3, 0xa4, 0xa9, 0x8a, 0x87, 0x90, 0x9d, 0x06, 0x0b, 0x1c, 0x11, 0x32, 0x3f, 0x28, 0x25, 0x6e, 0x63, 0x74, 0x79, 0x5a, 0x57, 0x40, 0x4d, 0xda, 0xd7, 0xc0, 0xcd, 0xee, 0xe3, 0xf4, 0xf9, 0xb2, 0xbf, 0xa8, 0xa5, 0x86, 0x8b, 0x9c, 0x91, 0x0a, 0x07, 0x10, 0x1d, 0x3e, 0x33, 0x24, 0x29, 0x62, 0x6f, 0x78, 0x75, 0x56, 0x5b, 0x4c, 0x41, 0x61, 0x6c, 0x7b, 0x76, 0x55, 0x58, 0x4f, 0x42, 0x09, 0x04, 0x13, 0x1e, 0x3d, 0x30, 0x27, 0x2a, 0xb1, 0xbc, 0xab, 0xa6, 0x85, 0x88, 0x9f, 0x92, 0xd9, 0xd4, 0xc3, 0xce, 0xed, 0xe0, 0xf7, 0xfa, 0xb7, 0xba, 0xad, 0xa0, 0x83, 0x8e, 0x99, 0x94, 0xdf, 0xd2, 0xc5, 0xc8, 0xeb, 0xe6, 0xf1, 0xfc, 0x67, 0x6a, 0x7d, 0x70, 0x53, 0x5e, 0x49, 0x44, 0x0f, 0x02, 0x15, 0x18, 0x3b, 0x36, 0x21, 0x2c, 0x0c, 0x01, 0x16, 0x1b, 0x38, 0x35, 0x22, 0x2f, 0x64, 0x69, 0x7e, 0x73, 0x50, 0x5d, 0x4a, 0x47, 0xdc, 0xd1, 0xc6, 0xcb, 0xe8, 0xe5, 0xf2, 0xff, 0xb4, 0xb9, 0xae, 0xa3, 0x80, 0x8d, 0x9a, 0x97],\n\t'tab14': [0x00, 0x0e, 0x1c, 0x12, 0x38, 0x36, 0x24, 0x2a, 0x70, 0x7e, 0x6c, 0x62, 0x48, 0x46, 0x54, 0x5a, 0xe0, 0xee, 0xfc, 0xf2, 0xd8, 0xd6, 0xc4, 0xca, 0x90, 0x9e, 0x8c, 0x82, 0xa8, 0xa6, 0xb4, 0xba, 0xdb, 0xd5, 0xc7, 0xc9, 0xe3, 0xed, 0xff, 0xf1, 0xab, 0xa5, 0xb7, 0xb9, 0x93, 0x9d, 0x8f, 0x81, 0x3b, 0x35, 0x27, 0x29, 0x03, 0x0d, 0x1f, 0x11, 0x4b, 0x45, 0x57, 0x59, 0x73, 0x7d, 0x6f, 0x61, 0xad, 0xa3, 0xb1, 0xbf, 0x95, 0x9b, 0x89, 0x87, 0xdd, 0xd3, 0xc1, 0xcf, 0xe5, 0xeb, 0xf9, 0xf7, 0x4d, 0x43, 0x51, 0x5f, 0x75, 0x7b, 0x69, 0x67, 0x3d, 0x33, 0x21, 0x2f, 0x05, 0x0b, 0x19, 0x17, 0x76, 0x78, 0x6a, 0x64, 0x4e, 0x40, 0x52, 0x5c, 0x06, 0x08, 0x1a, 0x14, 0x3e, 0x30, 0x22, 0x2c, 0x96, 0x98, 0x8a, 0x84, 0xae, 0xa0, 0xb2, 0xbc, 0xe6, 0xe8, 0xfa, 0xf4, 0xde, 0xd0, 0xc2, 0xcc, 0x41, 0x4f, 0x5d, 0x53, 0x79, 0x77, 0x65, 0x6b, 0x31, 0x3f, 0x2d, 0x23, 0x09, 0x07, 0x15, 0x1b, 0xa1, 0xaf, 0xbd, 0xb3, 0x99, 0x97, 0x85, 0x8b, 0xd1, 0xdf, 0xcd, 0xc3, 0xe9, 0xe7, 0xf5, 0xfb, 0x9a, 0x94, 0x86, 0x88, 0xa2, 0xac, 0xbe, 0xb0, 0xea, 0xe4, 0xf6, 0xf8, 0xd2, 0xdc, 0xce, 0xc0, 0x7a, 0x74, 0x66, 0x68, 0x42, 0x4c, 0x5e, 0x50, 0x0a, 0x04, 0x16, 0x18, 0x32, 0x3c, 0x2e, 0x20, 0xec, 0xe2, 0xf0, 0xfe, 0xd4, 0xda, 0xc8, 0xc6, 0x9c, 0x92, 0x80, 0x8e, 0xa4, 0xaa, 0xb8, 0xb6, 0x0c, 0x02, 0x10, 0x1e, 0x34, 0x3a, 0x28, 0x26, 0x7c, 0x72, 0x60, 0x6e, 0x44, 0x4a, 0x58, 0x56, 0x37, 0x39, 0x2b, 0x25, 0x0f, 0x01, 0x13, 0x1d, 0x47, 0x49, 0x5b, 0x55, 0x7f, 0x71, 0x63, 0x6d, 0xd7, 0xd9, 0xcb, 0xc5, 0xef, 0xe1, 0xf3, 0xfd, 0xa7, 0xa9, 0xbb, 0xb5, 0x9f, 0x91, 0x83, 0x8d]\n};\nAES.mixColumns = function (state) {\n\tvar tmp = [];\n\tfor (var i = 0; i < 4; i++) {\n\t\ttmp[0] = AES.mixColumnsTables.tab2[state[0][i]] ^ AES.mixColumnsTables.tab3[state[1][i]] ^ state[2][i] ^ state[3][i];\n\t\ttmp[1] = state[0][i] ^ AES.mixColumnsTables.tab2[state[1][i]] ^ AES.mixColumnsTables.tab3[state[2][i]] ^ state[3][i];\n\t\ttmp[2] = state[0][i] ^ state[1][i] ^ AES.mixColumnsTables.tab2[state[2][i]] ^ AES.mixColumnsTables.tab3[state[3][i]];\n\t\ttmp[3] = AES.mixColumnsTables.tab3[state[0][i]] ^ state[1][i] ^ state[2][i] ^ AES.mixColumnsTables.tab2[state[3][i]];\n\t\tfor (var i2 = 0; i2 < 4; i2++) {\n\t\t\tstate[i2][i] = tmp[i2];\n\t\t}\n\t}\n\treturn state;\n};\nAES.mixColumnsInv = function (state) {\n\tvar tmp = [];\n\tfor (var i = 0; i < 4; i++) {\n\t\ttmp[0] = AES.mixColumnsTables.tab14[state[0][i]] ^ AES.mixColumnsTables.tab11[state[1][i]] ^ AES.mixColumnsTables.tab13[state[2][i]] ^ AES.mixColumnsTables.tab9[state[3][i]];\n\t\ttmp[1] = AES.mixColumnsTables.tab9[state[0][i]] ^ AES.mixColumnsTables.tab14[state[1][i]] ^ AES.mixColumnsTables.tab11[state[2][i]] ^ AES.mixColumnsTables.tab13[state[3][i]];\n\t\ttmp[2] = AES.mixColumnsTables.tab13[state[0][i]] ^ AES.mixColumnsTables.tab9[state[1][i]] ^ AES.mixColumnsTables.tab14[state[2][i]] ^ AES.mixColumnsTables.tab11[state[3][i]];\n\t\ttmp[3] = AES.mixColumnsTables.tab11[state[0][i]] ^ AES.mixColumnsTables.tab13[state[1][i]] ^ AES.mixColumnsTables.tab9[state[2][i]] ^ AES.mixColumnsTables.tab14[state[3][i]];\n\t\tfor (var i2 = 0; i2 < 4; i2++) {\n\t\t\tstate[i2][i] = tmp[i2];\n\t\t}\n\t}\n\treturn state;\n};\n//Key schedule\nAES.expandKey = function (key) {\n\tvar keys = [];\n\tkeys[0] = key;\n\tfor (var i = 0; i < 10; i++) {\n\t\tkeys[i + 1] = AES.keySchedule.nextKey(keys[i], i);\n\t}\n\treturn keys;\n};\nAES.keySchedule = {};\nAES.keySchedule.Rcon = [\n\t[0x01, 0x00, 0x00, 0x00],\n\t[0x02, 0x00, 0x00, 0x00],\n\t[0x04, 0x00, 0x00, 0x00],\n\t[0x08, 0x00, 0x00, 0x00],\n\t[0x10, 0x00, 0x00, 0x00],\n\t[0x20, 0x00, 0x00, 0x00],\n\t[0x40, 0x00, 0x00, 0x00],\n\t[0x80, 0x00, 0x00, 0x00],\n\t[0x1b, 0x00, 0x00, 0x00],\n\t[0x36, 0x00, 0x00, 0x00]\n];\nAES.keySchedule.nextKey = function (key, round) {\n\tvar oldLastWord = [key[0][3], key[1][3], key[2][3], key[3][3]];\n\t//Rotate lastWord\n\toldLastWord = AES.keySchedule.rotateWord(oldLastWord);\n\t//Substitute lastWord\n\toldLastWord = AES.keySchedule.subWord(oldLastWord);\n\tvar newFirstWord = [];\n\t//Xor lastColumn with first column and Rcon\n\tfor (var i = 0; i < 4; i++) {\n\t\tnewFirstWord[i] = oldLastWord[i] ^ key[i][0] ^ AES.keySchedule.Rcon[round][i];\n\t}\n\tvar nextKey = AES.keySchedule.getKey(key, newFirstWord);\n\treturn nextKey;\n};\nAES.keySchedule.rotateWord = function (word) {\n\tvar buffer = word.splice(0, 1);\n\tword = word.concat(buffer);\n\treturn word;\n};\nAES.keySchedule.subWord = function (word) {\n\tfor (var i = 0; i < 4; i++) {\n\t\tword[i] = AES.subTables.direct[word[i]];\n\t}\n\treturn word;\n};\nAES.keySchedule.getKey = function (oldKey, firstWord) {\n\t//Set the firstWord as the first word of the newKey\n\tvar newKey = [\n\t\t[firstWord[0]],\n\t\t[firstWord[1]],\n\t\t[firstWord[2]],\n\t\t[firstWord[3]]\n\t];\n\t//Set all the other word of the newKey to the result of a xor operation between the previous word of the newKey and the same word in the oldKey\n\tfor (var i = 0; i < 4; i++) {\n\t\tfor (var i2 = 1; i2 < 4; i2++) {\n\t\t\tnewKey[i][i2] = newKey[i][i2 - 1] ^ oldKey[i][i2];\n\t\t}\n\t}\n\treturn newKey;\n};\n\nvar PBKDF2 = {};\nPBKDF2.derive = function (Hmac, HmacLength, password, salt, iterations, keyLength) {\n\tvar key = [];\n\t//For each block of length HmacLength needed to complete the key of length KeyLength, generate the block and append it to the key\n\tfor (var i = 0; i < Math.ceil(keyLength / HmacLength); i++) {\n\t\tkey = key.concat(PBKDF2.iterate(Hmac, password, salt, iterations, i + 1));\n\t}\n\t//Keep only keyLength bytes of key\n\treturn key.splice(0, keyLength);\n};\nPBKDF2.iterate = function (Hmac, password, salt, iterations, blockId) {\n\tvar tmp = Hmac(password, salt.concat(Utilities.intToBytes(blockId, 4)));\n\tvar result = tmp;\n\tfor (var i = 1; i < iterations; i++) {\n\t\ttmp = Hmac(password, tmp);\n\t\tresult = Utilities.xorBytes(result, tmp);\n\t}\n\treturn result;\n};\n\nvar Hmac_Sha256 = {};\nHmac_Sha256.hash = function (key, message) {\n\t//If the key is longer than 64 bytes, hash it\n\tif (key.length > 64) {\n\t\tkey = Sha256.hash(key);\n\t}\n\t//If the key is shorter than 64 bytes, pad it with 0's\n\tif (key.length < 64) {\n\t\twhile (key.length != 64) {\n\t\t\tkey.push(0x0);\n\t\t}\n\t}\n\t//Set the pads to the value of the key, then xor each byte of the pads with 0x5c for the outer pad, 0x36 for the inner one\n\tvar o_key_pad = key;\n\tvar i_key_pad = key;\n\tfor (var i = 0; i < 64; i++) {\n\t\to_key_pad[i] ^= 0x5c;\n\t\ti_key_pad[i] ^= 0x36;\n\t}\n\t//Return the hash of the outer pad concatenated with the hash of the inner pad concatenated with the given message.\n\treturn Sha256.hash(o_key_pad.concat(Sha256.hash(i_key_pad.concat(message))));\n};\n\nvar Sha256 = {};\nSha256.K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\nSha256.hash = function (message) {\n\t//Reset the hash values\n\tSha256.H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\t//Preprocessing\n\tmessage = Sha256.preProcessing(message);\n\t//Split the message in 64 bytes long blocks\n\tmessage = Utilities.split(message, 64);\n\t//Process each block\n\tfor (var i = 0; i < message.length; i++) {\n\t\t//Split the block in 4 bytes long words\n\t\tmessage[i] = Utilities.split(message[i], 4);\n\t\t//Convert the words from byte arrays to intagers\n\t\tfor (var i2 = 0; i2 < message[i].length; i2++) {\n\t\t\tmessage[i][i2] = Utilities.bytesToInt(message[i][i2]);\n\t\t}\n\t\t//Extend the block's words\n\t\tmessage[i] = Sha256.extendBlock(message[i]);\n\t\t//Main loop\n\t\tSha256.mainLoop(message[i]);\n\t}\n\t//Convert the words from intagers to 4 byte long byte arrays\n\tfor (var i = 0; i < Sha256.H.length; i++) {\n\t\tSha256.H[i] = Utilities.intToBytes(Sha256.H[i], 4);\n\t}\n\t//Join the hash values\n\tvar hash = Utilities.join(Sha256.H);\n\t//empty the hash values\n\tSha256.H = null;\n\treturn hash;\n};\nSha256.preProcessing = function (message) {\n\t//Get the original length of the message\n\tvar messageLength = message.length;\n\t//Append one bit and seven 0s (byte 80 in base 16)\n\tmessage.push(0x80);\n\t//Append the minimum number of bytes 0 until the length of the message modulo 64 is equal 56\n\twhile (message.length % 64 != 56) {\n\t\tmessage.push(0x0);\n\t}\n\t//Append the length in bits of the original message as a 8 byte long intager\n\tmessage = message.concat(Utilities.intToBytes(messageLength * 8, 8));\n\treturn message;\n};\nSha256.extendBlock = function (words) {\n\tfor (var i = 16; i < 64; i++) {\n\t\twords[i] = words[i - 16] + Sha256.σ0(words[i - 15]) + words[i - 7] + Sha256.σ1(words[i - 2]) & 0xffffffff;\n\t}\n\treturn words;\n};\nSha256.mainLoop = function (words) {\n\t//Initialize variables\n\tvar a = Sha256.H[0],\n\t\tb = Sha256.H[1],\n\t\tc = Sha256.H[2],\n\t\td = Sha256.H[3],\n\t\te = Sha256.H[4],\n\t\tf = Sha256.H[5],\n\t\tg = Sha256.H[6],\n\t\th = Sha256.H[7],\n\t\ttmp0,\n\t\ttmp1;\n\t//Main loop\n\tfor (var i = 0; i < 64; i++) {\n\t\ttmp0 = h + Sha256.Σ1(e) + Sha256.Ch(e, f, g) + Sha256.K[i] + words[i];\n\t\ttmp1 = Sha256.Σ0(a) + Sha256.Maj(a, b, c);\n\t\th = g;\n\t\tg = f;\n\t\tf = e;\n\t\te = d + tmp0 & 0xffffffff;\n\t\td = c;\n\t\tc = b;\n\t\tb = a;\n\t\ta = tmp0 + tmp1 & 0xffffffff;\n\t}\n\t//Add the result of the loop to the hash's value's array\n\tSha256.H[0] = Sha256.H[0] + a & 0xffffffff;\n\tSha256.H[1] = Sha256.H[1] + b & 0xffffffff;\n\tSha256.H[2] = Sha256.H[2] + c & 0xffffffff;\n\tSha256.H[3] = Sha256.H[3] + d & 0xffffffff;\n\tSha256.H[4] = Sha256.H[4] + e & 0xffffffff;\n\tSha256.H[5] = Sha256.H[5] + f & 0xffffffff;\n\tSha256.H[6] = Sha256.H[6] + g & 0xffffffff;\n\tSha256.H[7] = Sha256.H[7] + h & 0xffffffff;\n};\nSha256.RotR = function (input, places) {\n\treturn input >>> places | input << 32 - places;\n};\nSha256.Σ0 = function (x) {\n\treturn Sha256.RotR(x, 2) ^ Sha256.RotR(x, 13) ^ Sha256.RotR(x, 22);\n};\nSha256.Σ1 = function (x) {\n\treturn Sha256.RotR(x, 6) ^ Sha256.RotR(x, 11) ^ Sha256.RotR(x, 25);\n};\nSha256.σ0 = function (x) {\n\treturn Sha256.RotR(x, 7) ^ Sha256.RotR(x, 18) ^ x >>> 3;\n};\nSha256.σ1 = function (x) {\n\treturn Sha256.RotR(x, 17) ^ Sha256.RotR(x, 19) ^ x >>> 10;\n};\nSha256.Ch = function (x, y, z) {\n\treturn x & y ^ ~x & z;\n};\nSha256.Maj = function (x, y, z) {\n\treturn x & y ^ x & z ^ y & z;\n};\n\nvar SecureRNG = {};\nSecureRNG.generate = function (size) {\n\t//Test for support\n\tif (window.crypto.getRandomValues.toString() !== \"function getRandomValues() { [native code] }\") {\n\t\tStatus.set(\"Hàm getRandomValues không được hỗ trợ!\");\n\t\treturn undefined;\n\t}\n\t//Get the random values\n\tvar tmp1 = new Uint8Array(size);\n\twindow.crypto.getRandomValues(tmp1);\n\t//Convert the random values from Uint8Array to array\n\tvar tmp2 = new Array(size);\n\tfor (var i = 0; i < size; i++) {\n\t\ttmp2[i] = tmp1[i];\n\t}\n\treturn tmp2;\n};\n\n//ASCII Encoding and Decoding\nvar ASCII = {};\n//Encodes byte array to ASCII string\nASCII.encode = function (bytes) {\n\tvar str = \"\";\n\tfor (var i = 0; i < bytes.length; i++) {\n\t\tstr += String.fromCharCode(bytes[i]);\n\t}\n\treturn str;\n};\n//Decodes ASCII string to byte array\nASCII.decode = function (str) {\n\tvar bytes = [];\n\tfor (var i = 0; i < str.length; i++) {\n\t\tbytes.push(str.charCodeAt(i));\n\t}\n\treturn bytes;\n};\n\n//Hex Encoding and Decoding\nvar Hex = {};\n//Character map\nHex.map = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\n//Encodes byte array to hex string\nHex.encode = function (bytes) {\n\tvar str = \"\";\n\tfor (var i = 0; i < bytes.length; i++) {\n\t\tstr += Hex.map[bytes[i] >> 4] + Hex.map[bytes[i] % 16];\n\t}\n\treturn str;\n};\n//Decodes hex string to byte array\nHex.decode = function (str) {\n\tvar bytes = [],\n\t\ttmp1,\n\t\ttmp2;\n\tfor (var i = 0; i < Math.floor(str.length / 2); i++) {\n\t\ttmp1 = Hex.map.indexOf(str[i * 2]) << 4;\n\t\ttmp2 = Hex.map.indexOf(str[i * 2 + 1]);\n\t\tif (tmp1 == -1 || tmp2 == -1) {\n\t\t\tStatus.set(\"Chuỗi mã hóa hex không hợp lệ.\");\n\t\t\treturn false;\n\t\t}\n\t\tbytes.push(tmp1 + tmp2);\n\t}\n\treturn bytes;\n};\n\n//Base 64 Encoding and Decoding\nvar Base64 = {};\n//Encoding\nBase64.encode = function (bytes) {\n\treturn btoa(ASCII.encode(bytes));\n};\n//Decoding\nBase64.decode = function (str) {\n\tvar bytes = undefined;\n\ttry {\n\t\tbytes = ASCII.decode(atob(str));\n\t} catch (e) {\n\t\tStatus.set(\"Lỗi.\");\n\t}\n\treturn bytes;\n};\n\nvar Utilities = {};\nUtilities.split = function (input, size) {\n\tvar output = [];\n\twhile (input.length > 0) {\n\t\toutput.push(input.splice(0, size));\n\t}\n\treturn output;\n};\nUtilities.join = function (input) {\n\tvar output = [];\n\tfor (var i = 0; i < input.length; i++) {\n\t\toutput = output.concat(input[i]);\n\t}\n\treturn output;\n};\nUtilities.intToBytes = function (int, size) {\n\tvar bytes = [];\n\tfor (var i = size - 1; i >= 0; i--) {\n\t\tbytes[i] = int & 0xFF;\n\t\tint = int >> 8;\n\t}\n\treturn bytes;\n};\nUtilities.bytesToInt = function (bytes) {\n\tvar int = 0;\n\tfor (var i = 0; i < bytes.length; i++) {\n\t\tint = int << 8;\n\t\tint += bytes[i];\n\t}\n\treturn int;\n};\nUtilities.xorBytes = function (a, b) {\n\tfor (var i = 0; i < a.length; i++) {\n\t\ta[i] ^= b[i];\n\t}\n\treturn a;\n};\n\n//Status\nvar Status = {};\nStatus.set = function (Status) {\n\t$('#status').html('<div class=\"alert alert-primary mb-3 mt-3\">' + Status + '</div>');\n};\nStatus.clear = function () {\n\t$('#status').html('');\n};\n"]}